// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getModalFormMarkup if \`isBotProtected\` === true should render the right structure 1`] = `
<Modal
  hasCloseIcon={true}
  hasPadding={false}
  hasRoundedCorners={false}
  header={null}
  isDark={false}
  isFullscreen={false}
  onClose={[Function]}
  size="tiny"
  trigger={
    <Button
      hasShadow={false}
      icon={null}
      isCompact={true}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={false}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={true}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size="medium"
    >
      sumbmutbuttuntuxt
    </Button>
  }
>
  <Modal
    centered={true}
    className=""
    closeIcon={
      <Icon
        className={null}
        color={null}
        hasBorder={false}
        isButton={false}
        isCircular={false}
        isColorInverted={false}
        isDisabled={false}
        isLabelLeft={false}
        labelText={null}
        labelWeight={null}
        name="close"
        path={null}
        size={null}
      />
    }
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    dimmer="inverted"
    eventPool="Modal"
    onClose={[Function]}
    size="tiny"
    trigger={
      <Button
        hasShadow={false}
        icon={null}
        isCompact={true}
        isDisabled={false}
        isFluid={false}
        isFormSubmit={false}
        isLoading={false}
        isOutlined={false}
        isPositionedRight={true}
        isRounded={true}
        isSecondary={false}
        onClick={[Function]}
        size="medium"
      >
        sumbmutbuttuntuxt
      </Button>
    }
  >
    <Portal
      closeOnDocumentClick={false}
      closeOnEscape={true}
      eventPool="Modal"
      mountNode={<body />}
      onClose={[Function]}
      onMount={[Function]}
      onOpen={[Function]}
      onUnmount={[Function]}
      openOnTriggerClick={true}
      trigger={
        <Button
          hasShadow={false}
          icon={null}
          isCompact={true}
          isDisabled={false}
          isFluid={false}
          isFormSubmit={false}
          isLoading={false}
          isOutlined={false}
          isPositionedRight={true}
          isRounded={true}
          isSecondary={false}
          onClick={[Function]}
          size="medium"
        >
          sumbmutbuttuntuxt
        </Button>
      }
    >
      <Ref
        innerRef={[Function]}
      >
        <RefFindNode
          innerRef={[Function]}
        >
          <Button
            hasShadow={false}
            icon={null}
            isCompact={true}
            isDisabled={false}
            isFluid={false}
            isFormSubmit={false}
            isLoading={false}
            isOutlined={false}
            isPositionedRight={true}
            isRounded={true}
            isSecondary={false}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            size="medium"
          >
            <Button
              as="button"
              basic={false}
              circular={true}
              className=""
              compact={true}
              disabled={false}
              floated="right"
              fluid={false}
              loading={false}
              onClick={[Function]}
              secondary={false}
              size="medium"
              type="button"
            >
              <Ref
                innerRef={
                  Object {
                    "current": <button
                      class="ui medium circular compact right floated button"
                      type="button"
                    >
                      sumbmutbuttuntuxt
                    </button>,
                  }
                }
              >
                <RefFindNode
                  innerRef={
                    Object {
                      "current": <button
                        class="ui medium circular compact right floated button"
                        type="button"
                      >
                        sumbmutbuttuntuxt
                      </button>,
                    }
                  }
                >
                  <button
                    className="ui medium circular compact right floated button"
                    onClick={[Function]}
                    type="button"
                  >
                    sumbmutbuttuntuxt
                  </button>
                </RefFindNode>
              </Ref>
            </Button>
          </Button>
        </RefFindNode>
      </Ref>
    </Portal>
  </Modal>
</Modal>
`;

exports[`getModalFormMarkup if \`isPrivacyConsentRequired\` is \`truthy\` should render the right structure 1`] = `
<Modal
  hasCloseIcon={true}
  hasPadding={false}
  hasRoundedCorners={false}
  header={null}
  isDark={false}
  isFullscreen={false}
  onClose={[Function]}
  size="tiny"
  trigger={
    <Button
      hasShadow={false}
      icon={null}
      isCompact={true}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={false}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={true}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size="medium"
    >
      sumbmutbuttuntuxt
    </Button>
  }
>
  <Modal
    centered={true}
    className=""
    closeIcon={
      <Icon
        className={null}
        color={null}
        hasBorder={false}
        isButton={false}
        isCircular={false}
        isColorInverted={false}
        isDisabled={false}
        isLabelLeft={false}
        labelText={null}
        labelWeight={null}
        name="close"
        path={null}
        size={null}
      />
    }
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    dimmer="inverted"
    eventPool="Modal"
    onClose={[Function]}
    size="tiny"
    trigger={
      <Button
        hasShadow={false}
        icon={null}
        isCompact={true}
        isDisabled={false}
        isFluid={false}
        isFormSubmit={false}
        isLoading={false}
        isOutlined={false}
        isPositionedRight={true}
        isRounded={true}
        isSecondary={false}
        onClick={[Function]}
        size="medium"
      >
        sumbmutbuttuntuxt
      </Button>
    }
  >
    <Portal
      closeOnDocumentClick={false}
      closeOnEscape={true}
      eventPool="Modal"
      mountNode={<body />}
      onClose={[Function]}
      onMount={[Function]}
      onOpen={[Function]}
      onUnmount={[Function]}
      openOnTriggerClick={true}
      trigger={
        <Button
          hasShadow={false}
          icon={null}
          isCompact={true}
          isDisabled={false}
          isFluid={false}
          isFormSubmit={false}
          isLoading={false}
          isOutlined={false}
          isPositionedRight={true}
          isRounded={true}
          isSecondary={false}
          onClick={[Function]}
          size="medium"
        >
          sumbmutbuttuntuxt
        </Button>
      }
    >
      <Ref
        innerRef={[Function]}
      >
        <RefFindNode
          innerRef={[Function]}
        >
          <Button
            hasShadow={false}
            icon={null}
            isCompact={true}
            isDisabled={false}
            isFluid={false}
            isFormSubmit={false}
            isLoading={false}
            isOutlined={false}
            isPositionedRight={true}
            isRounded={true}
            isSecondary={false}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            size="medium"
          >
            <Button
              as="button"
              basic={false}
              circular={true}
              className=""
              compact={true}
              disabled={false}
              floated="right"
              fluid={false}
              loading={false}
              onClick={[Function]}
              secondary={false}
              size="medium"
              type="button"
            >
              <Ref
                innerRef={
                  Object {
                    "current": <button
                      class="ui medium circular compact right floated button"
                      type="button"
                    >
                      sumbmutbuttuntuxt
                    </button>,
                  }
                }
              >
                <RefFindNode
                  innerRef={
                    Object {
                      "current": <button
                        class="ui medium circular compact right floated button"
                        type="button"
                      >
                        sumbmutbuttuntuxt
                      </button>,
                    }
                  }
                >
                  <button
                    className="ui medium circular compact right floated button"
                    onClick={[Function]}
                    type="button"
                  >
                    sumbmutbuttuntuxt
                  </button>
                </RefFindNode>
              </Ref>
            </Button>
          </Button>
        </RefFindNode>
      </Ref>
    </Portal>
  </Modal>
</Modal>
`;

exports[`getModalFormMarkup if \`isShowingPlaceholder\` is \`true\` should render the right structure 1`] = `
<Modal
  hasCloseIcon={true}
  hasPadding={false}
  hasRoundedCorners={false}
  header={null}
  isDark={false}
  isFullscreen={false}
  onClose={[Function]}
  size="tiny"
  trigger={
    <Button
      hasShadow={false}
      icon={null}
      isCompact={true}
      isDisabled={true}
      isFluid={false}
      isFormSubmit={false}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={true}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size="medium"
    >
      sumbmutbuttuntuxt
    </Button>
  }
>
  <Modal
    centered={true}
    className=""
    closeIcon={
      <Icon
        className={null}
        color={null}
        hasBorder={false}
        isButton={false}
        isCircular={false}
        isColorInverted={false}
        isDisabled={false}
        isLabelLeft={false}
        labelText={null}
        labelWeight={null}
        name="close"
        path={null}
        size={null}
      />
    }
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    dimmer="inverted"
    eventPool="Modal"
    onClose={[Function]}
    size="tiny"
    trigger={
      <Button
        hasShadow={false}
        icon={null}
        isCompact={true}
        isDisabled={true}
        isFluid={false}
        isFormSubmit={false}
        isLoading={false}
        isOutlined={false}
        isPositionedRight={true}
        isRounded={true}
        isSecondary={false}
        onClick={[Function]}
        size="medium"
      >
        sumbmutbuttuntuxt
      </Button>
    }
  >
    <Portal
      closeOnDocumentClick={false}
      closeOnEscape={true}
      eventPool="Modal"
      mountNode={<body />}
      onClose={[Function]}
      onMount={[Function]}
      onOpen={[Function]}
      onUnmount={[Function]}
      openOnTriggerClick={true}
      trigger={
        <Button
          hasShadow={false}
          icon={null}
          isCompact={true}
          isDisabled={true}
          isFluid={false}
          isFormSubmit={false}
          isLoading={false}
          isOutlined={false}
          isPositionedRight={true}
          isRounded={true}
          isSecondary={false}
          onClick={[Function]}
          size="medium"
        >
          sumbmutbuttuntuxt
        </Button>
      }
    >
      <Ref
        innerRef={[Function]}
      >
        <RefFindNode
          innerRef={[Function]}
        >
          <Button
            hasShadow={false}
            icon={null}
            isCompact={true}
            isDisabled={true}
            isFluid={false}
            isFormSubmit={false}
            isLoading={false}
            isOutlined={false}
            isPositionedRight={true}
            isRounded={true}
            isSecondary={false}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            size="medium"
          >
            <Button
              as="button"
              basic={false}
              circular={true}
              className=""
              compact={true}
              disabled={true}
              floated="right"
              fluid={false}
              loading={false}
              onClick={[Function]}
              secondary={false}
              size="medium"
              type="button"
            >
              <Ref
                innerRef={
                  Object {
                    "current": <button
                      class="ui medium circular compact disabled right floated button"
                      disabled=""
                      tabindex="-1"
                      type="button"
                    >
                      sumbmutbuttuntuxt
                    </button>,
                  }
                }
              >
                <RefFindNode
                  innerRef={
                    Object {
                      "current": <button
                        class="ui medium circular compact disabled right floated button"
                        disabled=""
                        tabindex="-1"
                        type="button"
                      >
                        sumbmutbuttuntuxt
                      </button>,
                    }
                  }
                >
                  <button
                    className="ui medium circular compact disabled right floated button"
                    disabled={true}
                    onClick={[Function]}
                    tabIndex={-1}
                    type="button"
                  >
                    sumbmutbuttuntuxt
                  </button>
                </RefFindNode>
              </Ref>
            </Button>
          </Button>
        </RefFindNode>
      </Ref>
    </Portal>
  </Modal>
</Modal>
`;

exports[`getModalFormMarkup should have the right structure with default props 1`] = `
<Modal
  hasCloseIcon={true}
  hasPadding={false}
  hasRoundedCorners={false}
  header={null}
  isDark={false}
  isFullscreen={false}
  onClose={[Function]}
  size="tiny"
  trigger={
    <Button
      hasShadow={false}
      icon={null}
      isCompact={true}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={false}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={true}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size="medium"
    />
  }
>
  <Modal
    centered={true}
    className=""
    closeIcon={
      <Icon
        className={null}
        color={null}
        hasBorder={false}
        isButton={false}
        isCircular={false}
        isColorInverted={false}
        isDisabled={false}
        isLabelLeft={false}
        labelText={null}
        labelWeight={null}
        name="close"
        path={null}
        size={null}
      />
    }
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    dimmer="inverted"
    eventPool="Modal"
    onClose={[Function]}
    size="tiny"
    trigger={
      <Button
        hasShadow={false}
        icon={null}
        isCompact={true}
        isDisabled={false}
        isFluid={false}
        isFormSubmit={false}
        isLoading={false}
        isOutlined={false}
        isPositionedRight={true}
        isRounded={true}
        isSecondary={false}
        onClick={[Function]}
        size="medium"
      />
    }
  >
    <Portal
      closeOnDocumentClick={false}
      closeOnEscape={true}
      eventPool="Modal"
      mountNode={<body />}
      onClose={[Function]}
      onMount={[Function]}
      onOpen={[Function]}
      onUnmount={[Function]}
      openOnTriggerClick={true}
      trigger={
        <Button
          hasShadow={false}
          icon={null}
          isCompact={true}
          isDisabled={false}
          isFluid={false}
          isFormSubmit={false}
          isLoading={false}
          isOutlined={false}
          isPositionedRight={true}
          isRounded={true}
          isSecondary={false}
          onClick={[Function]}
          size="medium"
        />
      }
    >
      <Ref
        innerRef={[Function]}
      >
        <RefFindNode
          innerRef={[Function]}
        >
          <Button
            hasShadow={false}
            icon={null}
            isCompact={true}
            isDisabled={false}
            isFluid={false}
            isFormSubmit={false}
            isLoading={false}
            isOutlined={false}
            isPositionedRight={true}
            isRounded={true}
            isSecondary={false}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            size="medium"
          >
            <Button
              as="button"
              basic={false}
              circular={true}
              className=""
              compact={true}
              disabled={false}
              floated="right"
              fluid={false}
              loading={false}
              onClick={[Function]}
              secondary={false}
              size="medium"
              type="button"
            >
              <Ref
                innerRef={
                  Object {
                    "current": <button
                      class="ui medium circular compact right floated button"
                      type="button"
                    />,
                  }
                }
              >
                <RefFindNode
                  innerRef={
                    Object {
                      "current": <button
                        class="ui medium circular compact right floated button"
                        type="button"
                      />,
                    }
                  }
                >
                  <button
                    className="ui medium circular compact right floated button"
                    onClick={[Function]}
                    type="button"
                  />
                </RefFindNode>
              </Ref>
            </Button>
          </Button>
        </RefFindNode>
      </Ref>
    </Portal>
  </Modal>
</Modal>
`;

exports[`getModalFormMarkup should render the right structure when props are passed 1`] = `
<Modal
  hasCloseIcon={true}
  hasPadding={false}
  hasRoundedCorners={false}
  header={null}
  isDark={false}
  isFullscreen={false}
  onClose={[Function]}
  size="tiny"
  trigger={
    <Button
      hasShadow={false}
      icon={null}
      isCompact={true}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={false}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={true}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size="medium"
    >
      sumbmutbuttuntuxt
    </Button>
  }
>
  <Modal
    centered={true}
    className=""
    closeIcon={
      <Icon
        className={null}
        color={null}
        hasBorder={false}
        isButton={false}
        isCircular={false}
        isColorInverted={false}
        isDisabled={false}
        isLabelLeft={false}
        labelText={null}
        labelWeight={null}
        name="close"
        path={null}
        size={null}
      />
    }
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    dimmer="inverted"
    eventPool="Modal"
    onClose={[Function]}
    size="tiny"
    trigger={
      <Button
        hasShadow={false}
        icon={null}
        isCompact={true}
        isDisabled={false}
        isFluid={false}
        isFormSubmit={false}
        isLoading={false}
        isOutlined={false}
        isPositionedRight={true}
        isRounded={true}
        isSecondary={false}
        onClick={[Function]}
        size="medium"
      >
        sumbmutbuttuntuxt
      </Button>
    }
  >
    <Portal
      closeOnDocumentClick={false}
      closeOnEscape={true}
      eventPool="Modal"
      mountNode={<body />}
      onClose={[Function]}
      onMount={[Function]}
      onOpen={[Function]}
      onUnmount={[Function]}
      openOnTriggerClick={true}
      trigger={
        <Button
          hasShadow={false}
          icon={null}
          isCompact={true}
          isDisabled={false}
          isFluid={false}
          isFormSubmit={false}
          isLoading={false}
          isOutlined={false}
          isPositionedRight={true}
          isRounded={true}
          isSecondary={false}
          onClick={[Function]}
          size="medium"
        >
          sumbmutbuttuntuxt
        </Button>
      }
    >
      <Ref
        innerRef={[Function]}
      >
        <RefFindNode
          innerRef={[Function]}
        >
          <Button
            hasShadow={false}
            icon={null}
            isCompact={true}
            isDisabled={false}
            isFluid={false}
            isFormSubmit={false}
            isLoading={false}
            isOutlined={false}
            isPositionedRight={true}
            isRounded={true}
            isSecondary={false}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            size="medium"
          >
            <Button
              as="button"
              basic={false}
              circular={true}
              className=""
              compact={true}
              disabled={false}
              floated="right"
              fluid={false}
              loading={false}
              onClick={[Function]}
              secondary={false}
              size="medium"
              type="button"
            >
              <Ref
                innerRef={
                  Object {
                    "current": <button
                      class="ui medium circular compact right floated button"
                      type="button"
                    >
                      sumbmutbuttuntuxt
                    </button>,
                  }
                }
              >
                <RefFindNode
                  innerRef={
                    Object {
                      "current": <button
                        class="ui medium circular compact right floated button"
                        type="button"
                      >
                        sumbmutbuttuntuxt
                      </button>,
                    }
                  }
                >
                  <button
                    className="ui medium circular compact right floated button"
                    onClick={[Function]}
                    type="button"
                  >
                    sumbmutbuttuntuxt
                  </button>
                </RefFindNode>
              </Ref>
            </Button>
          </Button>
        </RefFindNode>
      </Ref>
    </Portal>
  </Modal>
</Modal>
`;
