// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component by default should render the right structure 1`] = `
<ToggleInputSegment
  description={null}
  heading="üë§"
  isToggleChecked={false}
  onClick={[Function]}
>
  <Segment
    className="is-input-segment is-toggle-input-segment"
    onClick={[Function]}
    vertical={true}
  >
    <div
      className="ui vertical segment is-input-segment is-toggle-input-segment"
      onClick={[Function]}
    >
      <FlexContainer
        alignContent={null}
        alignItems="baseline"
        flexDirection="row"
        flexWrap={null}
        justifyContent="space-between"
      >
        <div
          className="flex-container"
          style={
            Object {
              "alignContent": null,
              "alignItems": "baseline",
              "display": "flex",
              "flexDirection": "row",
              "flexGrow": "1",
              "flexWrap": null,
              "height": "100%",
              "justifyContent": "space-between",
            }
          }
        >
          <div>
            <Heading
              className={null}
              hasMargin={true}
              isColorInverted={false}
              size="medium"
              textAlign={null}
            >
              <Header
                as="h3"
                className=""
                inverted={false}
                textAlign={null}
              >
                <h3
                  className="ui header"
                >
                  üë§
                </h3>
              </Header>
            </Heading>
          </div>
          <Toggle
            isChecked={false}
            isCompact={true}
          >
            <Checkbox
              error={false}
              isChecked={false}
              isCompact={true}
              isDisabled={false}
              isFluid={false}
              isLabelLeft={false}
              isRadioButton={false}
              isToggle={true}
              label=""
              name=""
              onChange={[Function]}
              onClick={[Function]}
            >
              <InputController
                adaptOnChangeEvent={[Function]}
                error={false}
                icon={null}
                initialValue=""
                inputOnChangeFunctionName="onChange"
                isCompact={true}
                isFluid={false}
                isFocused={false}
                isValid={false}
                label={null}
                mapValueToProps={[Function]}
                name=""
                onChange={[Function]}
                value={false}
              >
                <Input
                  className="compact"
                  fluid={false}
                  iconPosition={null}
                  type="text"
                >
                  <div
                    className="ui input compact"
                  >
                    <Checkbox
                      checked={false}
                      className=""
                      disabled={false}
                      key=".0"
                      label=""
                      onChange={[Function]}
                      onClick={[Function]}
                      radio={false}
                      toggle={true}
                      type="checkbox"
                    >
                      <div
                        className="ui toggle checkbox"
                        onChange={[Function]}
                        onClick={[Function]}
                        onMouseDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="hidden"
                          onClick={[Function]}
                          readOnly={true}
                          tabIndex={0}
                          type="checkbox"
                        />
                        <label
                          key=""
                        />
                      </div>
                    </Checkbox>
                  </div>
                </Input>
              </InputController>
            </Checkbox>
          </Toggle>
        </div>
      </FlexContainer>
    </div>
  </Segment>
</ToggleInputSegment>
`;

exports[`Component if \`props.description\` is passed should render the right structure 1`] = `
<ToggleInputSegment
  description="üê∑"
  heading="üë§"
  isToggleChecked={false}
  onClick={[Function]}
>
  <Segment
    className="is-input-segment is-toggle-input-segment"
    onClick={[Function]}
    vertical={true}
  >
    <div
      className="ui vertical segment is-input-segment is-toggle-input-segment"
      onClick={[Function]}
    >
      <FlexContainer
        alignContent={null}
        alignItems="baseline"
        flexDirection="row"
        flexWrap={null}
        justifyContent="space-between"
      >
        <div
          className="flex-container"
          style={
            Object {
              "alignContent": null,
              "alignItems": "baseline",
              "display": "flex",
              "flexDirection": "row",
              "flexGrow": "1",
              "flexWrap": null,
              "height": "100%",
              "justifyContent": "space-between",
            }
          }
        >
          <div>
            <Heading
              className={null}
              hasMargin={true}
              isColorInverted={false}
              size="medium"
              textAlign={null}
            >
              <Header
                as="h3"
                className=""
                inverted={false}
                textAlign={null}
              >
                <h3
                  className="ui header"
                >
                  üë§
                </h3>
              </Header>
            </Heading>
            <Paragraph
              size="medium"
              weight={null}
            >
              <p
                className=""
              >
                üê∑
              </p>
            </Paragraph>
          </div>
          <Toggle
            isChecked={false}
            isCompact={true}
          >
            <Checkbox
              error={false}
              isChecked={false}
              isCompact={true}
              isDisabled={false}
              isFluid={false}
              isLabelLeft={false}
              isRadioButton={false}
              isToggle={true}
              label=""
              name=""
              onChange={[Function]}
              onClick={[Function]}
            >
              <InputController
                adaptOnChangeEvent={[Function]}
                error={false}
                icon={null}
                initialValue=""
                inputOnChangeFunctionName="onChange"
                isCompact={true}
                isFluid={false}
                isFocused={false}
                isValid={false}
                label={null}
                mapValueToProps={[Function]}
                name=""
                onChange={[Function]}
                value={false}
              >
                <Input
                  className="compact"
                  fluid={false}
                  iconPosition={null}
                  type="text"
                >
                  <div
                    className="ui input compact"
                  >
                    <Checkbox
                      checked={false}
                      className=""
                      disabled={false}
                      key=".0"
                      label=""
                      onChange={[Function]}
                      onClick={[Function]}
                      radio={false}
                      toggle={true}
                      type="checkbox"
                    >
                      <div
                        className="ui toggle checkbox"
                        onChange={[Function]}
                        onClick={[Function]}
                        onMouseDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="hidden"
                          onClick={[Function]}
                          readOnly={true}
                          tabIndex={0}
                          type="checkbox"
                        />
                        <label
                          key=""
                        />
                      </div>
                    </Checkbox>
                  </div>
                </Input>
              </InputController>
            </Checkbox>
          </Toggle>
        </div>
      </FlexContainer>
    </div>
  </Segment>
</ToggleInputSegment>
`;
