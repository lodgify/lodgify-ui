// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SearchBar /> by default should render the right structure 1`] = `
<SearchBar
  className={null}
  dateRangePickerLocaleCode="ko"
  datesCheckInLabel="Check in"
  datesCheckOutLabel="Check out"
  datesInputOnFocusChange={[Function]}
  datesInputValue={
    Object {
      "endDtate": "1970-01-01T00:00:00.000Z",
      "startDate": "1970-01-01T00:00:00.000Z",
    }
  }
  getIsDayBlocked={[Function]}
  guestsInputLabel="Guests"
  guestsInputValue={1}
  isDisplayedAsModal={false}
  isFixed={false}
  isStackable={false}
  locationInputLabel="Location"
  locationInputValue="some value"
  locationOptions={
    Array [
      Object {
        "text": "Barcelona",
        "value": "barcelona",
      },
      Object {
        "text": "Valencia",
        "value": "valencia",
      },
      Object {
        "text": "Madrid",
        "value": "madrid",
      },
      Object {
        "text": "Bilbao",
        "value": "bilbao",
      },
    ]
  }
  modalHeadingText="Check our availability"
  modalSummaryElement={null}
  onChangeInput={[Function]}
  onCloseModal={[Function]}
  onSubmit={[Function]}
  searchButton={
    <Button
      hasShadow={false}
      icon="search"
      isCompact={false}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={true}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={false}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size={null}
    >
      Search
    </Button>
  }
  summaryElement={null}
  willLocationDropdownOpenAbove={false}
>
  <div
    className="search-bar"
  >
    <Form
      as="form"
      onSubmit={[Function]}
    >
      <form
        className="ui form"
        onSubmit={[Function]}
      >
        <SearchFields
          className={null}
          dateRangePickerLocaleCode="ko"
          datesCheckInLabel="Check in"
          datesCheckOutLabel="Check out"
          datesInputOnFocusChange={[Function]}
          datesInputValue={
            Object {
              "endDtate": "1970-01-01T00:00:00.000Z",
              "startDate": "1970-01-01T00:00:00.000Z",
            }
          }
          getIsDayBlocked={[Function]}
          guestsInputLabel="Guests"
          guestsInputValue={1}
          isDisplayedAsModal={false}
          isFixed={false}
          isStackable={false}
          locationInputLabel="Location"
          locationInputValue="some value"
          locationOptions={
            Array [
              Object {
                "text": "Barcelona",
                "value": "barcelona",
              },
              Object {
                "text": "Valencia",
                "value": "valencia",
              },
              Object {
                "text": "Madrid",
                "value": "madrid",
              },
              Object {
                "text": "Bilbao",
                "value": "bilbao",
              },
            ]
          }
          modalHeadingText="Check our availability"
          modalSummaryElement={null}
          onChangeInput={[Function]}
          onCloseModal={[Function]}
          onInputChange={[Function]}
          onSubmit={[Function]}
          searchButton={
            <Button
              hasShadow={false}
              icon="search"
              isCompact={false}
              isDisabled={false}
              isFluid={false}
              isFormSubmit={true}
              isLoading={false}
              isOutlined={false}
              isPositionedRight={false}
              isRounded={true}
              isSecondary={false}
              onClick={[Function]}
              size={null}
            >
              Search
            </Button>
          }
          summaryElement={null}
          willLocationDropdownOpenAbove={false}
        >
          <div
            className="inputs-container"
          >
            <div
              className="input-container location-input-container"
            >
              <Dropdown
                error={false}
                getOptionsWithSearch={null}
                icon="map pin"
                initialValue={null}
                isClearable={true}
                isCompact={false}
                isDisabled={false}
                isSearchable={false}
                isValid={false}
                label="Location"
                name="location"
                noResultsText="No results"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                options={
                  Array [
                    Object {
                      "text": "Barcelona",
                      "value": "barcelona",
                    },
                    Object {
                      "text": "Valencia",
                      "value": "valencia",
                    },
                    Object {
                      "text": "Madrid",
                      "value": "madrid",
                    },
                    Object {
                      "text": "Bilbao",
                      "value": "bilbao",
                    },
                  ]
                }
                value="some value"
                willOpenAbove={false}
              >
                <div
                  className="dropdown-container dirty"
                >
                  <Icon
                    className={null}
                    color={null}
                    hasBorder={false}
                    isButton={false}
                    isCircular={false}
                    isColorInverted={false}
                    isDisabled={false}
                    isLabelLeft={false}
                    labelText={null}
                    labelWeight={null}
                    name="map pin"
                    path={null}
                    size={null}
                  >
                    <i
                      className="icon"
                    >
                      <svg
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M12,2.72c-3.17,0-5.74,3-5.74,6.69S12,21.28,12,21.28s5.74-8.17,5.74-11.87S15.17,2.72,12,2.72Zm0,9.74a4,4,0,1,1,4-4A4,4,0,0,1,12,12.46Z"
                          fill="currentColor"
                        />
                      </svg>
                    </i>
                  </Icon>
                  <Dropdown
                    additionLabel="Add "
                    additionPosition="top"
                    clearable={true}
                    closeOnBlur={true}
                    closeOnEscape={true}
                    compact={false}
                    deburr={false}
                    disabled={false}
                    icon={
                      <Icon
                        className={null}
                        color={null}
                        hasBorder={false}
                        isButton={false}
                        isCircular={false}
                        isColorInverted={false}
                        isDisabled={false}
                        isLabelLeft={false}
                        labelText={null}
                        labelWeight={null}
                        name="close"
                        path={null}
                        size={null}
                      />
                    }
                    minCharacters={1}
                    noResultsMessage="No results"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onClick={[Function]}
                    open={false}
                    openOnFocus={true}
                    options={
                      Array [
                        Object {
                          "key": "0",
                          "label": undefined,
                          "text": "Barcelona",
                          "value": "barcelona",
                        },
                        Object {
                          "key": "1",
                          "label": undefined,
                          "text": "Valencia",
                          "value": "valencia",
                        },
                        Object {
                          "key": "2",
                          "label": undefined,
                          "text": "Madrid",
                          "value": "madrid",
                        },
                        Object {
                          "key": "3",
                          "label": undefined,
                          "text": "Bilbao",
                          "value": "bilbao",
                        },
                      ]
                    }
                    placeholder="Location"
                    renderLabel={[Function]}
                    search={false}
                    searchInput="text"
                    selectOnBlur={false}
                    selectOnNavigation={true}
                    selection={true}
                    upward={false}
                    value="some value"
                    wrapSelection={true}
                  >
                    <Ref
                      innerRef={
                        Object {
                          "current": <div
                            aria-disabled="false"
                            aria-expanded="false"
                            class="ui selection dropdown"
                            role="listbox"
                            tabindex="0"
                          >
                            <div
                              aria-atomic="true"
                              aria-live="polite"
                              class="text"
                              role="alert"
                            />
                            <i
                              class="icon clear"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            <div
                              class="menu transition"
                            >
                              <div
                                aria-checked="false"
                                aria-selected="true"
                                class="selected item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Barcelona
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Valencia
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Madrid
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Bilbao
                                </span>
                              </div>
                            </div>
                          </div>,
                        }
                      }
                    >
                      <RefFindNode
                        innerRef={
                          Object {
                            "current": <div
                              aria-disabled="false"
                              aria-expanded="false"
                              class="ui selection dropdown"
                              role="listbox"
                              tabindex="0"
                            >
                              <div
                                aria-atomic="true"
                                aria-live="polite"
                                class="text"
                                role="alert"
                              />
                              <i
                                class="icon clear"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                              <div
                                class="menu transition"
                              >
                                <div
                                  aria-checked="false"
                                  aria-selected="true"
                                  class="selected item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </div>
                            </div>,
                          }
                        }
                      >
                        <div
                          aria-disabled={false}
                          aria-expanded={false}
                          className="ui selection dropdown"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          role="listbox"
                          tabIndex={0}
                        >
                          <div
                            aria-atomic={true}
                            aria-live="polite"
                            className="text"
                            role="alert"
                          />
                          <Icon
                            className="clear"
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="close"
                            onClick={[Function]}
                            path={null}
                            size={null}
                          >
                            <i
                              className="icon clear"
                              onClick={[Function]}
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </Icon>
                          <DropdownMenu
                            open={false}
                          >
                            <div
                              className="menu transition"
                            >
                              <DropdownItem
                                active={false}
                                key="0"
                                onClick={[Function]}
                                selected={true}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Barcelona"
                                value="barcelona"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={true}
                                  className="selected item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="1"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Valencia"
                                value="valencia"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="2"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Madrid"
                                value="madrid"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="3"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Bilbao"
                                value="bilbao"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </DropdownItem>
                            </div>
                          </DropdownMenu>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Dropdown>
                </div>
              </Dropdown>
            </div>
            <div
              className="input-container dates-input-container"
            >
              <WithResponsive(DateRangePicker)
                endDatePlaceholderText="Check out"
                getIsDayBlocked={[Function]}
                localeCode="ko"
                name="dates"
                onChange={[Function]}
                onFocusChange={[Function]}
                startDatePlaceholderText="Check in"
                value={
                  Object {
                    "endDtate": "1970-01-01T00:00:00.000Z",
                    "startDate": "1970-01-01T00:00:00.000Z",
                  }
                }
                willOpenAbove={false}
              >
                <Responsive
                  as={[Function]}
                  endDatePlaceholderText="Check out"
                  getIsDayBlocked={[Function]}
                  getWidth={[Function]}
                  isUserOnMobile={false}
                  localeCode="ko"
                  name="dates"
                  onChange={[Function]}
                  onFocusChange={[Function]}
                  onUpdate={[Function]}
                  startDatePlaceholderText="Check in"
                  value={
                    Object {
                      "endDtate": "1970-01-01T00:00:00.000Z",
                      "startDate": "1970-01-01T00:00:00.000Z",
                    }
                  }
                  willOpenAbove={false}
                  windowInnerWidth={1024}
                >
                  <DateRangePicker
                    displayFormat="DD/MM/YYYY"
                    endDatePlaceholderText="Check out"
                    error={false}
                    getIsDayBlocked={[Function]}
                    isLoading={false}
                    isUserOnMobile={false}
                    isValid={false}
                    localeCode="ko"
                    name="dates"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    startDatePlaceholderText="Check in"
                    value={
                      Object {
                        "endDtate": "1970-01-01T00:00:00.000Z",
                        "startDate": "1970-01-01T00:00:00.000Z",
                      }
                    }
                    willOpenAbove={false}
                    windowInnerWidth={1024}
                  >
                    <InputController
                      adaptOnChangeEvent={[Function]}
                      error={false}
                      icon={null}
                      inputOnChangeFunctionName="onDatesChange"
                      isCompact={false}
                      isFluid={false}
                      isFocused={false}
                      isValid={false}
                      mapValueToProps={[Function]}
                      name="dates"
                      onChange={[Function]}
                      value={
                        Object {
                          "endDtate": "1970-01-01T00:00:00.000Z",
                          "startDate": "1970-01-01T00:00:00.000Z",
                        }
                      }
                    >
                      <Input
                        className="dirty"
                        fluid={false}
                        iconPosition={null}
                        name="dates"
                        type="text"
                        value={
                          Object {
                            "endDtate": "1970-01-01T00:00:00.000Z",
                            "startDate": "1970-01-01T00:00:00.000Z",
                          }
                        }
                      >
                        <div
                          className="ui input dirty"
                        >
                          <DateRangePicker
                            customArrowIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            customInputIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="calendar"
                                path={null}
                                size={null}
                              />
                            }
                            daySize={52}
                            disabled={false}
                            displayFormat="DD/MM/YYYY"
                            endDatePlaceholderText="Check out"
                            focusedInput={null}
                            hideKeyboardShortcutsPanel={true}
                            isDayBlocked={[Function]}
                            key=".0"
                            navNext={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            navPrev={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow left"
                                path={null}
                                size={null}
                              />
                            }
                            onDatesChange={[Function]}
                            onFocusChange={[Function]}
                            openDirection="down"
                            showClearDates={true}
                            startDate={"1970-01-01T00:00:00.000Z"}
                            startDatePlaceholderText="Check in"
                            withPortal={true}
                          >
                            <div />
                          </DateRangePicker>
                        </div>
                      </Input>
                    </InputController>
                    <div />
                  </DateRangePicker>
                </Responsive>
              </WithResponsive(DateRangePicker)>
            </div>
            <div
              className="input-container guests-input-container"
            >
              <CounterDropdown
                counterName="guests"
                counterValue={1}
                dropdownLabel="Guests"
                onChange={[Function]}
                willOpenAbove={false}
              >
                <Popup
                  className="counter-dropdown"
                  content={
                    <FlexContainer
                      alignContent={null}
                      alignItems={null}
                      className={null}
                      flexDirection="row"
                      flexWrap={null}
                      justifyContent="space-between"
                    >
                      <Counter
                        min={0}
                        name="guests"
                        onChange={[Function]}
                        renderValue={[Function]}
                        value={1}
                      />
                    </FlexContainer>
                  }
                  disabled={false}
                  eventsEnabled={true}
                  offset={0}
                  on="click"
                  onClose={[Function]}
                  onOpen={[Function]}
                  open={false}
                  pinned={false}
                  position="bottom left"
                  text="Guests"
                  trigger={
                    <div
                      className="dropdown-container dirty"
                      role="button"
                    >
                      <div
                        className="ui selection dropdown counter-dropdown-trigger"
                      >
                        Guests
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="caret down"
                          path={null}
                          size={null}
                        />
                      </div>
                    </div>
                  }
                >
                  <Portal
                    closeOnDocumentClick={true}
                    closeOnEscape={true}
                    closeOnTriggerClick={true}
                    eventPool="default"
                    onClose={[Function]}
                    onMount={[Function]}
                    onOpen={[Function]}
                    onUnmount={[Function]}
                    open={false}
                    openOnTriggerClick={true}
                    trigger={
                      <div
                        className="dropdown-container dirty"
                        role="button"
                      >
                        <div
                          className="ui selection dropdown counter-dropdown-trigger"
                        >
                          Guests
                          <Icon
                            className={null}
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="caret down"
                            path={null}
                            size={null}
                          />
                        </div>
                      </div>
                    }
                    triggerRef={
                      Object {
                        "current": <div
                          class="dropdown-container dirty"
                          role="button"
                        >
                          <div
                            class="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20,8.5l-8,7-8-7Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </div>
                        </div>,
                      }
                    }
                  >
                    <Ref
                      innerRef={[Function]}
                    >
                      <RefFindNode
                        innerRef={[Function]}
                      >
                        <div
                          className="dropdown-container dirty"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          role="button"
                        >
                          <div
                            className="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <Icon
                              className={null}
                              color={null}
                              hasBorder={false}
                              isButton={false}
                              isCircular={false}
                              isColorInverted={false}
                              isDisabled={false}
                              isLabelLeft={false}
                              labelText={null}
                              labelWeight={null}
                              name="caret down"
                              path={null}
                              size={null}
                            >
                              <i
                                className="icon"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M20,8.5l-8,7-8-7Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                            </Icon>
                          </div>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Portal>
                </Popup>
              </CounterDropdown>
            </div>
            <div
              className="button-container"
            >
              <Button
                hasShadow={false}
                icon="search"
                isCompact={false}
                isDisabled={false}
                isFluid={false}
                isFormSubmit={true}
                isLoading={false}
                isOutlined={false}
                isPositionedRight={false}
                isRounded={true}
                isSecondary={false}
                onClick={[Function]}
                size={null}
              >
                <Button
                  as="button"
                  basic={false}
                  circular={true}
                  className=""
                  compact={false}
                  disabled={false}
                  floated="left"
                  fluid={false}
                  loading={false}
                  onClick={[Function]}
                  secondary={false}
                  size={null}
                  type="submit"
                >
                  <Ref
                    innerRef={
                      Object {
                        "current": <button
                          class="ui circular left floated button"
                          type="submit"
                        >
                          <i
                            class="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                          Search
                        </button>,
                      }
                    }
                  >
                    <RefFindNode
                      innerRef={
                        Object {
                          "current": <button
                            class="ui circular left floated button"
                            type="submit"
                          >
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            Search
                          </button>,
                        }
                      }
                    >
                      <button
                        className="ui circular left floated button"
                        onClick={[Function]}
                        type="submit"
                      >
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="search"
                          path={null}
                          size={null}
                        >
                          <i
                            className="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                        </Icon>
                        Search
                      </button>
                    </RefFindNode>
                  </Ref>
                </Button>
              </Button>
            </div>
          </div>
        </SearchFields>
      </form>
    </Form>
  </div>
</SearchBar>
`;

exports[`<SearchBar /> if \`isDisplayedAsModal\` is true should render the right structure 1`] = `null`;

exports[`<SearchBar /> if \`props.isFixed\` is true should render the right structure 1`] = `
<SearchBar
  className={null}
  dateRangePickerLocaleCode="ko"
  datesCheckInLabel="Check in"
  datesCheckOutLabel="Check out"
  datesInputOnFocusChange={[Function]}
  datesInputValue={
    Object {
      "endDtate": "1970-01-01T00:00:00.000Z",
      "startDate": "1970-01-01T00:00:00.000Z",
    }
  }
  getIsDayBlocked={[Function]}
  guestsInputLabel="Guests"
  guestsInputValue={1}
  isDisplayedAsModal={false}
  isFixed={true}
  isStackable={false}
  locationInputLabel="Location"
  locationInputValue="some value"
  locationOptions={
    Array [
      Object {
        "text": "Barcelona",
        "value": "barcelona",
      },
      Object {
        "text": "Valencia",
        "value": "valencia",
      },
      Object {
        "text": "Madrid",
        "value": "madrid",
      },
      Object {
        "text": "Bilbao",
        "value": "bilbao",
      },
    ]
  }
  modalHeadingText="Check our availability"
  modalSummaryElement={null}
  onChangeInput={[Function]}
  onCloseModal={[Function]}
  onSubmit={[Function]}
  searchButton={
    <Button
      hasShadow={false}
      icon="search"
      isCompact={false}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={true}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={false}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size={null}
    >
      Search
    </Button>
  }
  summaryElement={null}
  willLocationDropdownOpenAbove={false}
>
  <div
    className="search-bar is-fixed"
  >
    <HorizontalGutters>
      <Container>
        <div
          className="ui container"
        >
          <ShowOn
            computer={true}
            mobile={false}
            parent="div"
            parentProps={Object {}}
            tablet={false}
            widescreen={true}
          >
            <div
              className="show-on-computer show-on-widescreen"
            >
              <Form
                as="form"
                onSubmit={[Function]}
              >
                <form
                  className="ui form"
                  onSubmit={[Function]}
                >
                  <SearchFields
                    className={null}
                    dateRangePickerLocaleCode="ko"
                    datesCheckInLabel="Check in"
                    datesCheckOutLabel="Check out"
                    datesInputOnFocusChange={[Function]}
                    datesInputValue={
                      Object {
                        "endDtate": "1970-01-01T00:00:00.000Z",
                        "startDate": "1970-01-01T00:00:00.000Z",
                      }
                    }
                    getIsDayBlocked={[Function]}
                    guestsInputLabel="Guests"
                    guestsInputValue={1}
                    isDisplayedAsModal={false}
                    isFixed={true}
                    isStackable={false}
                    locationInputLabel="Location"
                    locationInputValue="some value"
                    locationOptions={
                      Array [
                        Object {
                          "text": "Barcelona",
                          "value": "barcelona",
                        },
                        Object {
                          "text": "Valencia",
                          "value": "valencia",
                        },
                        Object {
                          "text": "Madrid",
                          "value": "madrid",
                        },
                        Object {
                          "text": "Bilbao",
                          "value": "bilbao",
                        },
                      ]
                    }
                    modalHeadingText="Check our availability"
                    modalSummaryElement={null}
                    onChangeInput={[Function]}
                    onCloseModal={[Function]}
                    onInputChange={[Function]}
                    onSubmit={[Function]}
                    searchButton={
                      <Button
                        hasShadow={false}
                        icon="search"
                        isCompact={false}
                        isDisabled={false}
                        isFluid={false}
                        isFormSubmit={true}
                        isLoading={false}
                        isOutlined={false}
                        isPositionedRight={false}
                        isRounded={true}
                        isSecondary={false}
                        onClick={[Function]}
                        size={null}
                      >
                        Search
                      </Button>
                    }
                    summaryElement={null}
                    willLocationDropdownOpenAbove={false}
                  >
                    <div
                      className="inputs-container"
                    >
                      <div
                        className="input-container location-input-container"
                      >
                        <Dropdown
                          error={false}
                          getOptionsWithSearch={null}
                          icon="map pin"
                          initialValue={null}
                          isClearable={true}
                          isCompact={false}
                          isDisabled={false}
                          isSearchable={false}
                          isValid={false}
                          label="Location"
                          name="location"
                          noResultsText="No results"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          options={
                            Array [
                              Object {
                                "text": "Barcelona",
                                "value": "barcelona",
                              },
                              Object {
                                "text": "Valencia",
                                "value": "valencia",
                              },
                              Object {
                                "text": "Madrid",
                                "value": "madrid",
                              },
                              Object {
                                "text": "Bilbao",
                                "value": "bilbao",
                              },
                            ]
                          }
                          value="some value"
                          willOpenAbove={false}
                        >
                          <div
                            className="dropdown-container dirty"
                          >
                            <Icon
                              className={null}
                              color={null}
                              hasBorder={false}
                              isButton={false}
                              isCircular={false}
                              isColorInverted={false}
                              isDisabled={false}
                              isLabelLeft={false}
                              labelText={null}
                              labelWeight={null}
                              name="map pin"
                              path={null}
                              size={null}
                            >
                              <i
                                className="icon"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M12,2.72c-3.17,0-5.74,3-5.74,6.69S12,21.28,12,21.28s5.74-8.17,5.74-11.87S15.17,2.72,12,2.72Zm0,9.74a4,4,0,1,1,4-4A4,4,0,0,1,12,12.46Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                            </Icon>
                            <Dropdown
                              additionLabel="Add "
                              additionPosition="top"
                              clearable={true}
                              closeOnBlur={true}
                              closeOnEscape={true}
                              compact={false}
                              deburr={false}
                              disabled={false}
                              icon={
                                <Icon
                                  className={null}
                                  color={null}
                                  hasBorder={false}
                                  isButton={false}
                                  isCircular={false}
                                  isColorInverted={false}
                                  isDisabled={false}
                                  isLabelLeft={false}
                                  labelText={null}
                                  labelWeight={null}
                                  name="close"
                                  path={null}
                                  size={null}
                                />
                              }
                              minCharacters={1}
                              noResultsMessage="No results"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onClick={[Function]}
                              open={false}
                              openOnFocus={true}
                              options={
                                Array [
                                  Object {
                                    "key": "0",
                                    "label": undefined,
                                    "text": "Barcelona",
                                    "value": "barcelona",
                                  },
                                  Object {
                                    "key": "1",
                                    "label": undefined,
                                    "text": "Valencia",
                                    "value": "valencia",
                                  },
                                  Object {
                                    "key": "2",
                                    "label": undefined,
                                    "text": "Madrid",
                                    "value": "madrid",
                                  },
                                  Object {
                                    "key": "3",
                                    "label": undefined,
                                    "text": "Bilbao",
                                    "value": "bilbao",
                                  },
                                ]
                              }
                              placeholder="Location"
                              renderLabel={[Function]}
                              search={false}
                              searchInput="text"
                              selectOnBlur={false}
                              selectOnNavigation={true}
                              selection={true}
                              upward={false}
                              value="some value"
                              wrapSelection={true}
                            >
                              <Ref
                                innerRef={
                                  Object {
                                    "current": <div
                                      aria-disabled="false"
                                      aria-expanded="false"
                                      class="ui selection dropdown"
                                      role="listbox"
                                      tabindex="0"
                                    >
                                      <div
                                        aria-atomic="true"
                                        aria-live="polite"
                                        class="text"
                                        role="alert"
                                      />
                                      <i
                                        class="icon clear"
                                      >
                                        <svg
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                            fill="currentColor"
                                          />
                                        </svg>
                                      </i>
                                      <div
                                        class="menu transition"
                                      >
                                        <div
                                          aria-checked="false"
                                          aria-selected="true"
                                          class="selected item"
                                          role="option"
                                          style="pointer-events: all;"
                                        >
                                          <span
                                            class="text"
                                          >
                                            Barcelona
                                          </span>
                                        </div>
                                        <div
                                          aria-checked="false"
                                          aria-selected="false"
                                          class="item"
                                          role="option"
                                          style="pointer-events: all;"
                                        >
                                          <span
                                            class="text"
                                          >
                                            Valencia
                                          </span>
                                        </div>
                                        <div
                                          aria-checked="false"
                                          aria-selected="false"
                                          class="item"
                                          role="option"
                                          style="pointer-events: all;"
                                        >
                                          <span
                                            class="text"
                                          >
                                            Madrid
                                          </span>
                                        </div>
                                        <div
                                          aria-checked="false"
                                          aria-selected="false"
                                          class="item"
                                          role="option"
                                          style="pointer-events: all;"
                                        >
                                          <span
                                            class="text"
                                          >
                                            Bilbao
                                          </span>
                                        </div>
                                      </div>
                                    </div>,
                                  }
                                }
                              >
                                <RefFindNode
                                  innerRef={
                                    Object {
                                      "current": <div
                                        aria-disabled="false"
                                        aria-expanded="false"
                                        class="ui selection dropdown"
                                        role="listbox"
                                        tabindex="0"
                                      >
                                        <div
                                          aria-atomic="true"
                                          aria-live="polite"
                                          class="text"
                                          role="alert"
                                        />
                                        <i
                                          class="icon clear"
                                        >
                                          <svg
                                            viewBox="0 0 24 24"
                                          >
                                            <path
                                              d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                              fill="currentColor"
                                            />
                                          </svg>
                                        </i>
                                        <div
                                          class="menu transition"
                                        >
                                          <div
                                            aria-checked="false"
                                            aria-selected="true"
                                            class="selected item"
                                            role="option"
                                            style="pointer-events: all;"
                                          >
                                            <span
                                              class="text"
                                            >
                                              Barcelona
                                            </span>
                                          </div>
                                          <div
                                            aria-checked="false"
                                            aria-selected="false"
                                            class="item"
                                            role="option"
                                            style="pointer-events: all;"
                                          >
                                            <span
                                              class="text"
                                            >
                                              Valencia
                                            </span>
                                          </div>
                                          <div
                                            aria-checked="false"
                                            aria-selected="false"
                                            class="item"
                                            role="option"
                                            style="pointer-events: all;"
                                          >
                                            <span
                                              class="text"
                                            >
                                              Madrid
                                            </span>
                                          </div>
                                          <div
                                            aria-checked="false"
                                            aria-selected="false"
                                            class="item"
                                            role="option"
                                            style="pointer-events: all;"
                                          >
                                            <span
                                              class="text"
                                            >
                                              Bilbao
                                            </span>
                                          </div>
                                        </div>
                                      </div>,
                                    }
                                  }
                                >
                                  <div
                                    aria-disabled={false}
                                    aria-expanded={false}
                                    className="ui selection dropdown"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onMouseDown={[Function]}
                                    role="listbox"
                                    tabIndex={0}
                                  >
                                    <div
                                      aria-atomic={true}
                                      aria-live="polite"
                                      className="text"
                                      role="alert"
                                    />
                                    <Icon
                                      className="clear"
                                      color={null}
                                      hasBorder={false}
                                      isButton={false}
                                      isCircular={false}
                                      isColorInverted={false}
                                      isDisabled={false}
                                      isLabelLeft={false}
                                      labelText={null}
                                      labelWeight={null}
                                      name="close"
                                      onClick={[Function]}
                                      path={null}
                                      size={null}
                                    >
                                      <i
                                        className="icon clear"
                                        onClick={[Function]}
                                      >
                                        <svg
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                            fill="currentColor"
                                          />
                                        </svg>
                                      </i>
                                    </Icon>
                                    <DropdownMenu
                                      open={false}
                                    >
                                      <div
                                        className="menu transition"
                                      >
                                        <DropdownItem
                                          active={false}
                                          key="0"
                                          onClick={[Function]}
                                          selected={true}
                                          style={
                                            Object {
                                              "pointerEvents": "all",
                                            }
                                          }
                                          text="Barcelona"
                                          value="barcelona"
                                        >
                                          <div
                                            aria-checked={false}
                                            aria-selected={true}
                                            className="selected item"
                                            onClick={[Function]}
                                            role="option"
                                            style={
                                              Object {
                                                "pointerEvents": "all",
                                              }
                                            }
                                          >
                                            <span
                                              className="text"
                                            >
                                              Barcelona
                                            </span>
                                          </div>
                                        </DropdownItem>
                                        <DropdownItem
                                          active={false}
                                          key="1"
                                          onClick={[Function]}
                                          selected={false}
                                          style={
                                            Object {
                                              "pointerEvents": "all",
                                            }
                                          }
                                          text="Valencia"
                                          value="valencia"
                                        >
                                          <div
                                            aria-checked={false}
                                            aria-selected={false}
                                            className="item"
                                            onClick={[Function]}
                                            role="option"
                                            style={
                                              Object {
                                                "pointerEvents": "all",
                                              }
                                            }
                                          >
                                            <span
                                              className="text"
                                            >
                                              Valencia
                                            </span>
                                          </div>
                                        </DropdownItem>
                                        <DropdownItem
                                          active={false}
                                          key="2"
                                          onClick={[Function]}
                                          selected={false}
                                          style={
                                            Object {
                                              "pointerEvents": "all",
                                            }
                                          }
                                          text="Madrid"
                                          value="madrid"
                                        >
                                          <div
                                            aria-checked={false}
                                            aria-selected={false}
                                            className="item"
                                            onClick={[Function]}
                                            role="option"
                                            style={
                                              Object {
                                                "pointerEvents": "all",
                                              }
                                            }
                                          >
                                            <span
                                              className="text"
                                            >
                                              Madrid
                                            </span>
                                          </div>
                                        </DropdownItem>
                                        <DropdownItem
                                          active={false}
                                          key="3"
                                          onClick={[Function]}
                                          selected={false}
                                          style={
                                            Object {
                                              "pointerEvents": "all",
                                            }
                                          }
                                          text="Bilbao"
                                          value="bilbao"
                                        >
                                          <div
                                            aria-checked={false}
                                            aria-selected={false}
                                            className="item"
                                            onClick={[Function]}
                                            role="option"
                                            style={
                                              Object {
                                                "pointerEvents": "all",
                                              }
                                            }
                                          >
                                            <span
                                              className="text"
                                            >
                                              Bilbao
                                            </span>
                                          </div>
                                        </DropdownItem>
                                      </div>
                                    </DropdownMenu>
                                  </div>
                                </RefFindNode>
                              </Ref>
                            </Dropdown>
                          </div>
                        </Dropdown>
                      </div>
                      <div
                        className="input-container dates-input-container"
                      >
                        <WithResponsive(DateRangePicker)
                          endDatePlaceholderText="Check out"
                          getIsDayBlocked={[Function]}
                          localeCode="ko"
                          name="dates"
                          onChange={[Function]}
                          onFocusChange={[Function]}
                          startDatePlaceholderText="Check in"
                          value={
                            Object {
                              "endDtate": "1970-01-01T00:00:00.000Z",
                              "startDate": "1970-01-01T00:00:00.000Z",
                            }
                          }
                          willOpenAbove={false}
                        >
                          <Responsive
                            as={[Function]}
                            endDatePlaceholderText="Check out"
                            getIsDayBlocked={[Function]}
                            getWidth={[Function]}
                            isUserOnMobile={false}
                            localeCode="ko"
                            name="dates"
                            onChange={[Function]}
                            onFocusChange={[Function]}
                            onUpdate={[Function]}
                            startDatePlaceholderText="Check in"
                            value={
                              Object {
                                "endDtate": "1970-01-01T00:00:00.000Z",
                                "startDate": "1970-01-01T00:00:00.000Z",
                              }
                            }
                            willOpenAbove={false}
                            windowInnerWidth={1024}
                          >
                            <DateRangePicker
                              displayFormat="DD/MM/YYYY"
                              endDatePlaceholderText="Check out"
                              error={false}
                              getIsDayBlocked={[Function]}
                              isLoading={false}
                              isUserOnMobile={false}
                              isValid={false}
                              localeCode="ko"
                              name="dates"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocusChange={[Function]}
                              startDatePlaceholderText="Check in"
                              value={
                                Object {
                                  "endDtate": "1970-01-01T00:00:00.000Z",
                                  "startDate": "1970-01-01T00:00:00.000Z",
                                }
                              }
                              willOpenAbove={false}
                              windowInnerWidth={1024}
                            >
                              <InputController
                                adaptOnChangeEvent={[Function]}
                                error={false}
                                icon={null}
                                inputOnChangeFunctionName="onDatesChange"
                                isCompact={false}
                                isFluid={false}
                                isFocused={false}
                                isValid={false}
                                mapValueToProps={[Function]}
                                name="dates"
                                onChange={[Function]}
                                value={
                                  Object {
                                    "endDtate": "1970-01-01T00:00:00.000Z",
                                    "startDate": "1970-01-01T00:00:00.000Z",
                                  }
                                }
                              >
                                <Input
                                  className="dirty"
                                  fluid={false}
                                  iconPosition={null}
                                  name="dates"
                                  type="text"
                                  value={
                                    Object {
                                      "endDtate": "1970-01-01T00:00:00.000Z",
                                      "startDate": "1970-01-01T00:00:00.000Z",
                                    }
                                  }
                                >
                                  <div
                                    className="ui input dirty"
                                  >
                                    <DateRangePicker
                                      customArrowIcon={
                                        <Icon
                                          className={null}
                                          color={null}
                                          hasBorder={false}
                                          isButton={false}
                                          isCircular={false}
                                          isColorInverted={false}
                                          isDisabled={false}
                                          isLabelLeft={false}
                                          labelText={null}
                                          labelWeight={null}
                                          name="arrow right"
                                          path={null}
                                          size={null}
                                        />
                                      }
                                      customInputIcon={
                                        <Icon
                                          className={null}
                                          color={null}
                                          hasBorder={false}
                                          isButton={false}
                                          isCircular={false}
                                          isColorInverted={false}
                                          isDisabled={false}
                                          isLabelLeft={false}
                                          labelText={null}
                                          labelWeight={null}
                                          name="calendar"
                                          path={null}
                                          size={null}
                                        />
                                      }
                                      daySize={52}
                                      disabled={false}
                                      displayFormat="DD/MM/YYYY"
                                      endDatePlaceholderText="Check out"
                                      focusedInput={null}
                                      hideKeyboardShortcutsPanel={true}
                                      isDayBlocked={[Function]}
                                      key=".0"
                                      navNext={
                                        <Icon
                                          className={null}
                                          color={null}
                                          hasBorder={false}
                                          isButton={false}
                                          isCircular={false}
                                          isColorInverted={false}
                                          isDisabled={false}
                                          isLabelLeft={false}
                                          labelText={null}
                                          labelWeight={null}
                                          name="arrow right"
                                          path={null}
                                          size={null}
                                        />
                                      }
                                      navPrev={
                                        <Icon
                                          className={null}
                                          color={null}
                                          hasBorder={false}
                                          isButton={false}
                                          isCircular={false}
                                          isColorInverted={false}
                                          isDisabled={false}
                                          isLabelLeft={false}
                                          labelText={null}
                                          labelWeight={null}
                                          name="arrow left"
                                          path={null}
                                          size={null}
                                        />
                                      }
                                      onDatesChange={[Function]}
                                      onFocusChange={[Function]}
                                      openDirection="down"
                                      showClearDates={true}
                                      startDate={"1970-01-01T00:00:00.000Z"}
                                      startDatePlaceholderText="Check in"
                                      withPortal={true}
                                    >
                                      <div />
                                    </DateRangePicker>
                                  </div>
                                </Input>
                              </InputController>
                              <div />
                            </DateRangePicker>
                          </Responsive>
                        </WithResponsive(DateRangePicker)>
                      </div>
                      <div
                        className="input-container guests-input-container"
                      >
                        <CounterDropdown
                          counterName="guests"
                          counterValue={1}
                          dropdownLabel="Guests"
                          onChange={[Function]}
                          willOpenAbove={false}
                        >
                          <Popup
                            className="counter-dropdown"
                            content={
                              <FlexContainer
                                alignContent={null}
                                alignItems={null}
                                className={null}
                                flexDirection="row"
                                flexWrap={null}
                                justifyContent="space-between"
                              >
                                <Counter
                                  min={0}
                                  name="guests"
                                  onChange={[Function]}
                                  renderValue={[Function]}
                                  value={1}
                                />
                              </FlexContainer>
                            }
                            disabled={false}
                            eventsEnabled={true}
                            offset={0}
                            on="click"
                            onClose={[Function]}
                            onOpen={[Function]}
                            open={false}
                            pinned={false}
                            position="bottom left"
                            text="Guests"
                            trigger={
                              <div
                                className="dropdown-container dirty"
                                role="button"
                              >
                                <div
                                  className="ui selection dropdown counter-dropdown-trigger"
                                >
                                  Guests
                                  <Icon
                                    className={null}
                                    color={null}
                                    hasBorder={false}
                                    isButton={false}
                                    isCircular={false}
                                    isColorInverted={false}
                                    isDisabled={false}
                                    isLabelLeft={false}
                                    labelText={null}
                                    labelWeight={null}
                                    name="caret down"
                                    path={null}
                                    size={null}
                                  />
                                </div>
                              </div>
                            }
                          >
                            <Portal
                              closeOnDocumentClick={true}
                              closeOnEscape={true}
                              closeOnTriggerClick={true}
                              eventPool="default"
                              onClose={[Function]}
                              onMount={[Function]}
                              onOpen={[Function]}
                              onUnmount={[Function]}
                              open={false}
                              openOnTriggerClick={true}
                              trigger={
                                <div
                                  className="dropdown-container dirty"
                                  role="button"
                                >
                                  <div
                                    className="ui selection dropdown counter-dropdown-trigger"
                                  >
                                    Guests
                                    <Icon
                                      className={null}
                                      color={null}
                                      hasBorder={false}
                                      isButton={false}
                                      isCircular={false}
                                      isColorInverted={false}
                                      isDisabled={false}
                                      isLabelLeft={false}
                                      labelText={null}
                                      labelWeight={null}
                                      name="caret down"
                                      path={null}
                                      size={null}
                                    />
                                  </div>
                                </div>
                              }
                              triggerRef={
                                Object {
                                  "current": <div
                                    class="dropdown-container dirty"
                                    role="button"
                                  >
                                    <div
                                      class="ui selection dropdown counter-dropdown-trigger"
                                    >
                                      Guests
                                      <i
                                        class="icon"
                                      >
                                        <svg
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M20,8.5l-8,7-8-7Z"
                                            fill="currentColor"
                                          />
                                        </svg>
                                      </i>
                                    </div>
                                  </div>,
                                }
                              }
                            >
                              <Ref
                                innerRef={[Function]}
                              >
                                <RefFindNode
                                  innerRef={[Function]}
                                >
                                  <div
                                    className="dropdown-container dirty"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onMouseEnter={[Function]}
                                    onMouseLeave={[Function]}
                                    role="button"
                                  >
                                    <div
                                      className="ui selection dropdown counter-dropdown-trigger"
                                    >
                                      Guests
                                      <Icon
                                        className={null}
                                        color={null}
                                        hasBorder={false}
                                        isButton={false}
                                        isCircular={false}
                                        isColorInverted={false}
                                        isDisabled={false}
                                        isLabelLeft={false}
                                        labelText={null}
                                        labelWeight={null}
                                        name="caret down"
                                        path={null}
                                        size={null}
                                      >
                                        <i
                                          className="icon"
                                        >
                                          <svg
                                            viewBox="0 0 24 24"
                                          >
                                            <path
                                              d="M20,8.5l-8,7-8-7Z"
                                              fill="currentColor"
                                            />
                                          </svg>
                                        </i>
                                      </Icon>
                                    </div>
                                  </div>
                                </RefFindNode>
                              </Ref>
                            </Portal>
                          </Popup>
                        </CounterDropdown>
                      </div>
                      <div
                        className="button-container"
                      >
                        <Button
                          hasShadow={false}
                          icon="search"
                          isCompact={false}
                          isDisabled={false}
                          isFluid={false}
                          isFormSubmit={true}
                          isLoading={false}
                          isOutlined={false}
                          isPositionedRight={false}
                          isRounded={true}
                          isSecondary={false}
                          onClick={[Function]}
                          size={null}
                        >
                          <Button
                            as="button"
                            basic={false}
                            circular={true}
                            className=""
                            compact={false}
                            disabled={false}
                            floated="left"
                            fluid={false}
                            loading={false}
                            onClick={[Function]}
                            secondary={false}
                            size={null}
                            type="submit"
                          >
                            <Ref
                              innerRef={
                                Object {
                                  "current": <button
                                    class="ui circular left floated button"
                                    type="submit"
                                  >
                                    <i
                                      class="icon"
                                    >
                                      <svg
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                          fill="currentColor"
                                        />
                                      </svg>
                                    </i>
                                    Search
                                  </button>,
                                }
                              }
                            >
                              <RefFindNode
                                innerRef={
                                  Object {
                                    "current": <button
                                      class="ui circular left floated button"
                                      type="submit"
                                    >
                                      <i
                                        class="icon"
                                      >
                                        <svg
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                            fill="currentColor"
                                          />
                                        </svg>
                                      </i>
                                      Search
                                    </button>,
                                  }
                                }
                              >
                                <button
                                  className="ui circular left floated button"
                                  onClick={[Function]}
                                  type="submit"
                                >
                                  <Icon
                                    className={null}
                                    color={null}
                                    hasBorder={false}
                                    isButton={false}
                                    isCircular={false}
                                    isColorInverted={false}
                                    isDisabled={false}
                                    isLabelLeft={false}
                                    labelText={null}
                                    labelWeight={null}
                                    name="search"
                                    path={null}
                                    size={null}
                                  >
                                    <i
                                      className="icon"
                                    >
                                      <svg
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                          fill="currentColor"
                                        />
                                      </svg>
                                    </i>
                                  </Icon>
                                  Search
                                </button>
                              </RefFindNode>
                            </Ref>
                          </Button>
                        </Button>
                      </div>
                    </div>
                  </SearchFields>
                </form>
              </Form>
            </div>
          </ShowOn>
          <ShowOn
            computer={false}
            mobile={true}
            parent="div"
            parentProps={Object {}}
            tablet={true}
            widescreen={false}
          >
            <div
              className="show-on-mobile show-on-tablet"
            >
              <SearchModal
                className={null}
                dateRangePickerLocaleCode="ko"
                datesCheckInLabel="Check in"
                datesCheckOutLabel="Check out"
                datesInputOnFocusChange={[Function]}
                datesInputValue={
                  Object {
                    "endDtate": "1970-01-01T00:00:00.000Z",
                    "startDate": "1970-01-01T00:00:00.000Z",
                  }
                }
                getIsDayBlocked={[Function]}
                guestsInputLabel="Guests"
                guestsInputValue={1}
                handleSubmit={[Function]}
                isDisplayedAsModal={false}
                isFixed={true}
                isModalOpen={false}
                isStackable={false}
                locationInputLabel="Location"
                locationInputValue="some value"
                locationOptions={
                  Array [
                    Object {
                      "text": "Barcelona",
                      "value": "barcelona",
                    },
                    Object {
                      "text": "Valencia",
                      "value": "valencia",
                    },
                    Object {
                      "text": "Madrid",
                      "value": "madrid",
                    },
                    Object {
                      "text": "Bilbao",
                      "value": "bilbao",
                    },
                  ]
                }
                modalHeadingText="Check our availability"
                modalSummaryElement={null}
                onChangeInput={[Function]}
                onCloseModal={[Function]}
                onInputChange={[Function]}
                onSubmit={[Function]}
                searchButton={
                  <Button
                    hasShadow={false}
                    icon="search"
                    isCompact={false}
                    isDisabled={false}
                    isFluid={false}
                    isFormSubmit={true}
                    isLoading={false}
                    isOutlined={false}
                    isPositionedRight={false}
                    isRounded={true}
                    isSecondary={false}
                    onClick={[Function]}
                    size={null}
                  >
                    Search
                  </Button>
                }
                summaryElement={null}
                willLocationDropdownOpenAbove={false}
              >
                <Modal
                  hasCloseIcon={true}
                  hasPadding={true}
                  hasRoundedCorners={false}
                  header={
                    <Heading
                      className={null}
                      hasMargin={true}
                      isColorInverted={false}
                      size="small"
                      textAlign={null}
                    >
                      Check our availability
                    </Heading>
                  }
                  isFullscreen={true}
                  isOpen={false}
                  onClose={[Function]}
                  size="tiny"
                  trigger={
                    <Button
                      hasShadow={false}
                      icon="search"
                      isCompact={false}
                      isDisabled={false}
                      isFluid={false}
                      isFormSubmit={true}
                      isLoading={false}
                      isOutlined={false}
                      isPositionedRight={false}
                      isRounded={true}
                      isSecondary={false}
                      onClick={[Function]}
                      size={null}
                    >
                      Search
                    </Button>
                  }
                >
                  <Modal
                    centered={true}
                    className="has-padding"
                    closeIcon={
                      <Icon
                        className={null}
                        color={null}
                        hasBorder={false}
                        isButton={false}
                        isCircular={false}
                        isColorInverted={false}
                        isDisabled={false}
                        isLabelLeft={false}
                        labelText={null}
                        labelWeight={null}
                        name="close"
                        path={null}
                        size={null}
                      />
                    }
                    closeOnDimmerClick={true}
                    closeOnDocumentClick={false}
                    dimmer="inverted"
                    eventPool="Modal"
                    onClose={[Function]}
                    open={false}
                    size="fullscreen"
                    trigger={
                      <Button
                        hasShadow={false}
                        icon="search"
                        isCompact={false}
                        isDisabled={false}
                        isFluid={false}
                        isFormSubmit={true}
                        isLoading={false}
                        isOutlined={false}
                        isPositionedRight={false}
                        isRounded={true}
                        isSecondary={false}
                        onClick={[Function]}
                        size={null}
                      >
                        Search
                      </Button>
                    }
                  >
                    <Portal
                      closeOnDocumentClick={false}
                      closeOnEscape={true}
                      eventPool="Modal"
                      mountNode={<body />}
                      onClose={[Function]}
                      onMount={[Function]}
                      onOpen={[Function]}
                      onUnmount={[Function]}
                      open={false}
                      openOnTriggerClick={true}
                      trigger={
                        <Button
                          hasShadow={false}
                          icon="search"
                          isCompact={false}
                          isDisabled={false}
                          isFluid={false}
                          isFormSubmit={true}
                          isLoading={false}
                          isOutlined={false}
                          isPositionedRight={false}
                          isRounded={true}
                          isSecondary={false}
                          onClick={[Function]}
                          size={null}
                        >
                          Search
                        </Button>
                      }
                    >
                      <Ref
                        innerRef={[Function]}
                      >
                        <RefFindNode
                          innerRef={[Function]}
                        >
                          <Button
                            hasShadow={false}
                            icon="search"
                            isCompact={false}
                            isDisabled={false}
                            isFluid={false}
                            isFormSubmit={true}
                            isLoading={false}
                            isOutlined={false}
                            isPositionedRight={false}
                            isRounded={true}
                            isSecondary={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            size={null}
                          >
                            <Button
                              as="button"
                              basic={false}
                              circular={true}
                              className=""
                              compact={false}
                              disabled={false}
                              floated="left"
                              fluid={false}
                              loading={false}
                              onClick={[Function]}
                              secondary={false}
                              size={null}
                              type="submit"
                            >
                              <Ref
                                innerRef={
                                  Object {
                                    "current": <button
                                      class="ui circular left floated button"
                                      type="submit"
                                    >
                                      <i
                                        class="icon"
                                      >
                                        <svg
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                            fill="currentColor"
                                          />
                                        </svg>
                                      </i>
                                      Search
                                    </button>,
                                  }
                                }
                              >
                                <RefFindNode
                                  innerRef={
                                    Object {
                                      "current": <button
                                        class="ui circular left floated button"
                                        type="submit"
                                      >
                                        <i
                                          class="icon"
                                        >
                                          <svg
                                            viewBox="0 0 24 24"
                                          >
                                            <path
                                              d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                              fill="currentColor"
                                            />
                                          </svg>
                                        </i>
                                        Search
                                      </button>,
                                    }
                                  }
                                >
                                  <button
                                    className="ui circular left floated button"
                                    onClick={[Function]}
                                    type="submit"
                                  >
                                    <Icon
                                      className={null}
                                      color={null}
                                      hasBorder={false}
                                      isButton={false}
                                      isCircular={false}
                                      isColorInverted={false}
                                      isDisabled={false}
                                      isLabelLeft={false}
                                      labelText={null}
                                      labelWeight={null}
                                      name="search"
                                      path={null}
                                      size={null}
                                    >
                                      <i
                                        className="icon"
                                      >
                                        <svg
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                            fill="currentColor"
                                          />
                                        </svg>
                                      </i>
                                    </Icon>
                                    Search
                                  </button>
                                </RefFindNode>
                              </Ref>
                            </Button>
                          </Button>
                        </RefFindNode>
                      </Ref>
                    </Portal>
                  </Modal>
                </Modal>
              </SearchModal>
            </div>
          </ShowOn>
        </div>
      </Container>
    </HorizontalGutters>
  </div>
</SearchBar>
`;

exports[`<SearchBar /> if \`props.isShowingSummary\` is true should render the right structure 1`] = `
<SearchBar
  className={null}
  dateRangePickerLocaleCode="ko"
  datesCheckInLabel="Check in"
  datesCheckOutLabel="Check out"
  datesInputOnFocusChange={[Function]}
  datesInputValue={
    Object {
      "endDtate": "1970-01-01T00:00:00.000Z",
      "startDate": "1970-01-01T00:00:00.000Z",
    }
  }
  getIsDayBlocked={[Function]}
  guestsInputLabel="Guests"
  guestsInputValue={1}
  isDisplayedAsModal={false}
  isFixed={false}
  isShowingSummary={true}
  isStackable={false}
  locationInputLabel="Location"
  locationInputValue="some value"
  locationOptions={
    Array [
      Object {
        "text": "Barcelona",
        "value": "barcelona",
      },
      Object {
        "text": "Valencia",
        "value": "valencia",
      },
      Object {
        "text": "Madrid",
        "value": "madrid",
      },
      Object {
        "text": "Bilbao",
        "value": "bilbao",
      },
    ]
  }
  modalHeadingText="Check our availability"
  modalSummaryElement={null}
  onChangeInput={[Function]}
  onCloseModal={[Function]}
  onSubmit={[Function]}
  searchButton={
    <Button
      hasShadow={false}
      icon="search"
      isCompact={false}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={true}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={false}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size={null}
    >
      Search
    </Button>
  }
  summaryElement={null}
  willLocationDropdownOpenAbove={false}
>
  <div
    className="search-bar"
  >
    <Form
      as="form"
      onSubmit={[Function]}
    >
      <form
        className="ui form"
        onSubmit={[Function]}
      >
        <SearchFields
          className={null}
          dateRangePickerLocaleCode="ko"
          datesCheckInLabel="Check in"
          datesCheckOutLabel="Check out"
          datesInputOnFocusChange={[Function]}
          datesInputValue={
            Object {
              "endDtate": "1970-01-01T00:00:00.000Z",
              "startDate": "1970-01-01T00:00:00.000Z",
            }
          }
          getIsDayBlocked={[Function]}
          guestsInputLabel="Guests"
          guestsInputValue={1}
          isDisplayedAsModal={false}
          isFixed={false}
          isShowingSummary={true}
          isStackable={false}
          locationInputLabel="Location"
          locationInputValue="some value"
          locationOptions={
            Array [
              Object {
                "text": "Barcelona",
                "value": "barcelona",
              },
              Object {
                "text": "Valencia",
                "value": "valencia",
              },
              Object {
                "text": "Madrid",
                "value": "madrid",
              },
              Object {
                "text": "Bilbao",
                "value": "bilbao",
              },
            ]
          }
          modalHeadingText="Check our availability"
          modalSummaryElement={null}
          onChangeInput={[Function]}
          onCloseModal={[Function]}
          onInputChange={[Function]}
          onSubmit={[Function]}
          searchButton={
            <Button
              hasShadow={false}
              icon="search"
              isCompact={false}
              isDisabled={false}
              isFluid={false}
              isFormSubmit={true}
              isLoading={false}
              isOutlined={false}
              isPositionedRight={false}
              isRounded={true}
              isSecondary={false}
              onClick={[Function]}
              size={null}
            >
              Search
            </Button>
          }
          summaryElement={null}
          willLocationDropdownOpenAbove={false}
        >
          <div
            className="inputs-container"
          >
            <div
              className="input-container location-input-container"
            >
              <Dropdown
                error={false}
                getOptionsWithSearch={null}
                icon="map pin"
                initialValue={null}
                isClearable={true}
                isCompact={false}
                isDisabled={false}
                isSearchable={false}
                isValid={false}
                label="Location"
                name="location"
                noResultsText="No results"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                options={
                  Array [
                    Object {
                      "text": "Barcelona",
                      "value": "barcelona",
                    },
                    Object {
                      "text": "Valencia",
                      "value": "valencia",
                    },
                    Object {
                      "text": "Madrid",
                      "value": "madrid",
                    },
                    Object {
                      "text": "Bilbao",
                      "value": "bilbao",
                    },
                  ]
                }
                value="some value"
                willOpenAbove={false}
              >
                <div
                  className="dropdown-container dirty"
                >
                  <Icon
                    className={null}
                    color={null}
                    hasBorder={false}
                    isButton={false}
                    isCircular={false}
                    isColorInverted={false}
                    isDisabled={false}
                    isLabelLeft={false}
                    labelText={null}
                    labelWeight={null}
                    name="map pin"
                    path={null}
                    size={null}
                  >
                    <i
                      className="icon"
                    >
                      <svg
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M12,2.72c-3.17,0-5.74,3-5.74,6.69S12,21.28,12,21.28s5.74-8.17,5.74-11.87S15.17,2.72,12,2.72Zm0,9.74a4,4,0,1,1,4-4A4,4,0,0,1,12,12.46Z"
                          fill="currentColor"
                        />
                      </svg>
                    </i>
                  </Icon>
                  <Dropdown
                    additionLabel="Add "
                    additionPosition="top"
                    clearable={true}
                    closeOnBlur={true}
                    closeOnEscape={true}
                    compact={false}
                    deburr={false}
                    disabled={false}
                    icon={
                      <Icon
                        className={null}
                        color={null}
                        hasBorder={false}
                        isButton={false}
                        isCircular={false}
                        isColorInverted={false}
                        isDisabled={false}
                        isLabelLeft={false}
                        labelText={null}
                        labelWeight={null}
                        name="close"
                        path={null}
                        size={null}
                      />
                    }
                    minCharacters={1}
                    noResultsMessage="No results"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onClick={[Function]}
                    open={false}
                    openOnFocus={true}
                    options={
                      Array [
                        Object {
                          "key": "0",
                          "label": undefined,
                          "text": "Barcelona",
                          "value": "barcelona",
                        },
                        Object {
                          "key": "1",
                          "label": undefined,
                          "text": "Valencia",
                          "value": "valencia",
                        },
                        Object {
                          "key": "2",
                          "label": undefined,
                          "text": "Madrid",
                          "value": "madrid",
                        },
                        Object {
                          "key": "3",
                          "label": undefined,
                          "text": "Bilbao",
                          "value": "bilbao",
                        },
                      ]
                    }
                    placeholder="Location"
                    renderLabel={[Function]}
                    search={false}
                    searchInput="text"
                    selectOnBlur={false}
                    selectOnNavigation={true}
                    selection={true}
                    upward={false}
                    value="some value"
                    wrapSelection={true}
                  >
                    <Ref
                      innerRef={
                        Object {
                          "current": <div
                            aria-disabled="false"
                            aria-expanded="false"
                            class="ui selection dropdown"
                            role="listbox"
                            tabindex="0"
                          >
                            <div
                              aria-atomic="true"
                              aria-live="polite"
                              class="text"
                              role="alert"
                            />
                            <i
                              class="icon clear"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            <div
                              class="menu transition"
                            >
                              <div
                                aria-checked="false"
                                aria-selected="true"
                                class="selected item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Barcelona
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Valencia
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Madrid
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Bilbao
                                </span>
                              </div>
                            </div>
                          </div>,
                        }
                      }
                    >
                      <RefFindNode
                        innerRef={
                          Object {
                            "current": <div
                              aria-disabled="false"
                              aria-expanded="false"
                              class="ui selection dropdown"
                              role="listbox"
                              tabindex="0"
                            >
                              <div
                                aria-atomic="true"
                                aria-live="polite"
                                class="text"
                                role="alert"
                              />
                              <i
                                class="icon clear"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                              <div
                                class="menu transition"
                              >
                                <div
                                  aria-checked="false"
                                  aria-selected="true"
                                  class="selected item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </div>
                            </div>,
                          }
                        }
                      >
                        <div
                          aria-disabled={false}
                          aria-expanded={false}
                          className="ui selection dropdown"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          role="listbox"
                          tabIndex={0}
                        >
                          <div
                            aria-atomic={true}
                            aria-live="polite"
                            className="text"
                            role="alert"
                          />
                          <Icon
                            className="clear"
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="close"
                            onClick={[Function]}
                            path={null}
                            size={null}
                          >
                            <i
                              className="icon clear"
                              onClick={[Function]}
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </Icon>
                          <DropdownMenu
                            open={false}
                          >
                            <div
                              className="menu transition"
                            >
                              <DropdownItem
                                active={false}
                                key="0"
                                onClick={[Function]}
                                selected={true}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Barcelona"
                                value="barcelona"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={true}
                                  className="selected item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="1"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Valencia"
                                value="valencia"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="2"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Madrid"
                                value="madrid"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="3"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Bilbao"
                                value="bilbao"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </DropdownItem>
                            </div>
                          </DropdownMenu>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Dropdown>
                </div>
              </Dropdown>
            </div>
            <div
              className="input-container dates-input-container"
            >
              <WithResponsive(DateRangePicker)
                endDatePlaceholderText="Check out"
                getIsDayBlocked={[Function]}
                localeCode="ko"
                name="dates"
                onChange={[Function]}
                onFocusChange={[Function]}
                startDatePlaceholderText="Check in"
                value={
                  Object {
                    "endDtate": "1970-01-01T00:00:00.000Z",
                    "startDate": "1970-01-01T00:00:00.000Z",
                  }
                }
                willOpenAbove={false}
              >
                <Responsive
                  as={[Function]}
                  endDatePlaceholderText="Check out"
                  getIsDayBlocked={[Function]}
                  getWidth={[Function]}
                  isUserOnMobile={false}
                  localeCode="ko"
                  name="dates"
                  onChange={[Function]}
                  onFocusChange={[Function]}
                  onUpdate={[Function]}
                  startDatePlaceholderText="Check in"
                  value={
                    Object {
                      "endDtate": "1970-01-01T00:00:00.000Z",
                      "startDate": "1970-01-01T00:00:00.000Z",
                    }
                  }
                  willOpenAbove={false}
                  windowInnerWidth={1024}
                >
                  <DateRangePicker
                    displayFormat="DD/MM/YYYY"
                    endDatePlaceholderText="Check out"
                    error={false}
                    getIsDayBlocked={[Function]}
                    isLoading={false}
                    isUserOnMobile={false}
                    isValid={false}
                    localeCode="ko"
                    name="dates"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    startDatePlaceholderText="Check in"
                    value={
                      Object {
                        "endDtate": "1970-01-01T00:00:00.000Z",
                        "startDate": "1970-01-01T00:00:00.000Z",
                      }
                    }
                    willOpenAbove={false}
                    windowInnerWidth={1024}
                  >
                    <InputController
                      adaptOnChangeEvent={[Function]}
                      error={false}
                      icon={null}
                      inputOnChangeFunctionName="onDatesChange"
                      isCompact={false}
                      isFluid={false}
                      isFocused={false}
                      isValid={false}
                      mapValueToProps={[Function]}
                      name="dates"
                      onChange={[Function]}
                      value={
                        Object {
                          "endDtate": "1970-01-01T00:00:00.000Z",
                          "startDate": "1970-01-01T00:00:00.000Z",
                        }
                      }
                    >
                      <Input
                        className="dirty"
                        fluid={false}
                        iconPosition={null}
                        name="dates"
                        type="text"
                        value={
                          Object {
                            "endDtate": "1970-01-01T00:00:00.000Z",
                            "startDate": "1970-01-01T00:00:00.000Z",
                          }
                        }
                      >
                        <div
                          className="ui input dirty"
                        >
                          <DateRangePicker
                            customArrowIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            customInputIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="calendar"
                                path={null}
                                size={null}
                              />
                            }
                            daySize={52}
                            disabled={false}
                            displayFormat="DD/MM/YYYY"
                            endDatePlaceholderText="Check out"
                            focusedInput={null}
                            hideKeyboardShortcutsPanel={true}
                            isDayBlocked={[Function]}
                            key=".0"
                            navNext={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            navPrev={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow left"
                                path={null}
                                size={null}
                              />
                            }
                            onDatesChange={[Function]}
                            onFocusChange={[Function]}
                            openDirection="down"
                            showClearDates={true}
                            startDate={"1970-01-01T00:00:00.000Z"}
                            startDatePlaceholderText="Check in"
                            withPortal={true}
                          >
                            <div />
                          </DateRangePicker>
                        </div>
                      </Input>
                    </InputController>
                    <div />
                  </DateRangePicker>
                </Responsive>
              </WithResponsive(DateRangePicker)>
            </div>
            <div
              className="input-container guests-input-container"
            >
              <CounterDropdown
                counterName="guests"
                counterValue={1}
                dropdownLabel="Guests"
                onChange={[Function]}
                willOpenAbove={false}
              >
                <Popup
                  className="counter-dropdown"
                  content={
                    <FlexContainer
                      alignContent={null}
                      alignItems={null}
                      className={null}
                      flexDirection="row"
                      flexWrap={null}
                      justifyContent="space-between"
                    >
                      <Counter
                        min={0}
                        name="guests"
                        onChange={[Function]}
                        renderValue={[Function]}
                        value={1}
                      />
                    </FlexContainer>
                  }
                  disabled={false}
                  eventsEnabled={true}
                  offset={0}
                  on="click"
                  onClose={[Function]}
                  onOpen={[Function]}
                  open={false}
                  pinned={false}
                  position="bottom left"
                  text="Guests"
                  trigger={
                    <div
                      className="dropdown-container dirty"
                      role="button"
                    >
                      <div
                        className="ui selection dropdown counter-dropdown-trigger"
                      >
                        Guests
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="caret down"
                          path={null}
                          size={null}
                        />
                      </div>
                    </div>
                  }
                >
                  <Portal
                    closeOnDocumentClick={true}
                    closeOnEscape={true}
                    closeOnTriggerClick={true}
                    eventPool="default"
                    onClose={[Function]}
                    onMount={[Function]}
                    onOpen={[Function]}
                    onUnmount={[Function]}
                    open={false}
                    openOnTriggerClick={true}
                    trigger={
                      <div
                        className="dropdown-container dirty"
                        role="button"
                      >
                        <div
                          className="ui selection dropdown counter-dropdown-trigger"
                        >
                          Guests
                          <Icon
                            className={null}
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="caret down"
                            path={null}
                            size={null}
                          />
                        </div>
                      </div>
                    }
                    triggerRef={
                      Object {
                        "current": <div
                          class="dropdown-container dirty"
                          role="button"
                        >
                          <div
                            class="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20,8.5l-8,7-8-7Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </div>
                        </div>,
                      }
                    }
                  >
                    <Ref
                      innerRef={[Function]}
                    >
                      <RefFindNode
                        innerRef={[Function]}
                      >
                        <div
                          className="dropdown-container dirty"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          role="button"
                        >
                          <div
                            className="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <Icon
                              className={null}
                              color={null}
                              hasBorder={false}
                              isButton={false}
                              isCircular={false}
                              isColorInverted={false}
                              isDisabled={false}
                              isLabelLeft={false}
                              labelText={null}
                              labelWeight={null}
                              name="caret down"
                              path={null}
                              size={null}
                            >
                              <i
                                className="icon"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M20,8.5l-8,7-8-7Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                            </Icon>
                          </div>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Portal>
                </Popup>
              </CounterDropdown>
            </div>
            <div
              className="button-container"
            >
              <Button
                hasShadow={false}
                icon="search"
                isCompact={false}
                isDisabled={false}
                isFluid={false}
                isFormSubmit={true}
                isLoading={false}
                isOutlined={false}
                isPositionedRight={false}
                isRounded={true}
                isSecondary={false}
                onClick={[Function]}
                size={null}
              >
                <Button
                  as="button"
                  basic={false}
                  circular={true}
                  className=""
                  compact={false}
                  disabled={false}
                  floated="left"
                  fluid={false}
                  loading={false}
                  onClick={[Function]}
                  secondary={false}
                  size={null}
                  type="submit"
                >
                  <Ref
                    innerRef={
                      Object {
                        "current": <button
                          class="ui circular left floated button"
                          type="submit"
                        >
                          <i
                            class="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                          Search
                        </button>,
                      }
                    }
                  >
                    <RefFindNode
                      innerRef={
                        Object {
                          "current": <button
                            class="ui circular left floated button"
                            type="submit"
                          >
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            Search
                          </button>,
                        }
                      }
                    >
                      <button
                        className="ui circular left floated button"
                        onClick={[Function]}
                        type="submit"
                      >
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="search"
                          path={null}
                          size={null}
                        >
                          <i
                            className="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                        </Icon>
                        Search
                      </button>
                    </RefFindNode>
                  </Ref>
                </Button>
              </Button>
            </div>
          </div>
        </SearchFields>
      </form>
    </Form>
  </div>
</SearchBar>
`;

exports[`<SearchBar /> if \`props.isStackable\` is true should render the right structure 1`] = `
<SearchBar
  className={null}
  dateRangePickerLocaleCode="ko"
  datesCheckInLabel="Check in"
  datesCheckOutLabel="Check out"
  datesInputOnFocusChange={[Function]}
  datesInputValue={
    Object {
      "endDtate": "1970-01-01T00:00:00.000Z",
      "startDate": "1970-01-01T00:00:00.000Z",
    }
  }
  getIsDayBlocked={[Function]}
  guestsInputLabel="Guests"
  guestsInputValue={1}
  isDisplayedAsModal={false}
  isFixed={false}
  isStackable={true}
  locationInputLabel="Location"
  locationInputValue="some value"
  locationOptions={
    Array [
      Object {
        "text": "Barcelona",
        "value": "barcelona",
      },
      Object {
        "text": "Valencia",
        "value": "valencia",
      },
      Object {
        "text": "Madrid",
        "value": "madrid",
      },
      Object {
        "text": "Bilbao",
        "value": "bilbao",
      },
    ]
  }
  modalHeadingText="Check our availability"
  modalSummaryElement={null}
  onChangeInput={[Function]}
  onCloseModal={[Function]}
  onSubmit={[Function]}
  searchButton={
    <Button
      hasShadow={false}
      icon="search"
      isCompact={false}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={true}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={false}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size={null}
    >
      Search
    </Button>
  }
  summaryElement={null}
  willLocationDropdownOpenAbove={false}
>
  <div
    className="search-bar is-stackable"
  >
    <Form
      as="form"
      onSubmit={[Function]}
    >
      <form
        className="ui form"
        onSubmit={[Function]}
      >
        <SearchFields
          className={null}
          dateRangePickerLocaleCode="ko"
          datesCheckInLabel="Check in"
          datesCheckOutLabel="Check out"
          datesInputOnFocusChange={[Function]}
          datesInputValue={
            Object {
              "endDtate": "1970-01-01T00:00:00.000Z",
              "startDate": "1970-01-01T00:00:00.000Z",
            }
          }
          getIsDayBlocked={[Function]}
          guestsInputLabel="Guests"
          guestsInputValue={1}
          isDisplayedAsModal={false}
          isFixed={false}
          isStackable={true}
          locationInputLabel="Location"
          locationInputValue="some value"
          locationOptions={
            Array [
              Object {
                "text": "Barcelona",
                "value": "barcelona",
              },
              Object {
                "text": "Valencia",
                "value": "valencia",
              },
              Object {
                "text": "Madrid",
                "value": "madrid",
              },
              Object {
                "text": "Bilbao",
                "value": "bilbao",
              },
            ]
          }
          modalHeadingText="Check our availability"
          modalSummaryElement={null}
          onChangeInput={[Function]}
          onCloseModal={[Function]}
          onInputChange={[Function]}
          onSubmit={[Function]}
          searchButton={
            <Button
              hasShadow={false}
              icon="search"
              isCompact={false}
              isDisabled={false}
              isFluid={false}
              isFormSubmit={true}
              isLoading={false}
              isOutlined={false}
              isPositionedRight={false}
              isRounded={true}
              isSecondary={false}
              onClick={[Function]}
              size={null}
            >
              Search
            </Button>
          }
          summaryElement={null}
          willLocationDropdownOpenAbove={false}
        >
          <div
            className="inputs-container"
          >
            <div
              className="input-container location-input-container"
            >
              <Dropdown
                error={false}
                getOptionsWithSearch={null}
                icon="map pin"
                initialValue={null}
                isClearable={true}
                isCompact={false}
                isDisabled={false}
                isSearchable={false}
                isValid={false}
                label="Location"
                name="location"
                noResultsText="No results"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                options={
                  Array [
                    Object {
                      "text": "Barcelona",
                      "value": "barcelona",
                    },
                    Object {
                      "text": "Valencia",
                      "value": "valencia",
                    },
                    Object {
                      "text": "Madrid",
                      "value": "madrid",
                    },
                    Object {
                      "text": "Bilbao",
                      "value": "bilbao",
                    },
                  ]
                }
                value="some value"
                willOpenAbove={false}
              >
                <div
                  className="dropdown-container dirty"
                >
                  <Icon
                    className={null}
                    color={null}
                    hasBorder={false}
                    isButton={false}
                    isCircular={false}
                    isColorInverted={false}
                    isDisabled={false}
                    isLabelLeft={false}
                    labelText={null}
                    labelWeight={null}
                    name="map pin"
                    path={null}
                    size={null}
                  >
                    <i
                      className="icon"
                    >
                      <svg
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M12,2.72c-3.17,0-5.74,3-5.74,6.69S12,21.28,12,21.28s5.74-8.17,5.74-11.87S15.17,2.72,12,2.72Zm0,9.74a4,4,0,1,1,4-4A4,4,0,0,1,12,12.46Z"
                          fill="currentColor"
                        />
                      </svg>
                    </i>
                  </Icon>
                  <Dropdown
                    additionLabel="Add "
                    additionPosition="top"
                    clearable={true}
                    closeOnBlur={true}
                    closeOnEscape={true}
                    compact={false}
                    deburr={false}
                    disabled={false}
                    icon={
                      <Icon
                        className={null}
                        color={null}
                        hasBorder={false}
                        isButton={false}
                        isCircular={false}
                        isColorInverted={false}
                        isDisabled={false}
                        isLabelLeft={false}
                        labelText={null}
                        labelWeight={null}
                        name="close"
                        path={null}
                        size={null}
                      />
                    }
                    minCharacters={1}
                    noResultsMessage="No results"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onClick={[Function]}
                    open={false}
                    openOnFocus={true}
                    options={
                      Array [
                        Object {
                          "key": "0",
                          "label": undefined,
                          "text": "Barcelona",
                          "value": "barcelona",
                        },
                        Object {
                          "key": "1",
                          "label": undefined,
                          "text": "Valencia",
                          "value": "valencia",
                        },
                        Object {
                          "key": "2",
                          "label": undefined,
                          "text": "Madrid",
                          "value": "madrid",
                        },
                        Object {
                          "key": "3",
                          "label": undefined,
                          "text": "Bilbao",
                          "value": "bilbao",
                        },
                      ]
                    }
                    placeholder="Location"
                    renderLabel={[Function]}
                    search={false}
                    searchInput="text"
                    selectOnBlur={false}
                    selectOnNavigation={true}
                    selection={true}
                    upward={false}
                    value="some value"
                    wrapSelection={true}
                  >
                    <Ref
                      innerRef={
                        Object {
                          "current": <div
                            aria-disabled="false"
                            aria-expanded="false"
                            class="ui selection dropdown"
                            role="listbox"
                            tabindex="0"
                          >
                            <div
                              aria-atomic="true"
                              aria-live="polite"
                              class="text"
                              role="alert"
                            />
                            <i
                              class="icon clear"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            <div
                              class="menu transition"
                            >
                              <div
                                aria-checked="false"
                                aria-selected="true"
                                class="selected item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Barcelona
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Valencia
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Madrid
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Bilbao
                                </span>
                              </div>
                            </div>
                          </div>,
                        }
                      }
                    >
                      <RefFindNode
                        innerRef={
                          Object {
                            "current": <div
                              aria-disabled="false"
                              aria-expanded="false"
                              class="ui selection dropdown"
                              role="listbox"
                              tabindex="0"
                            >
                              <div
                                aria-atomic="true"
                                aria-live="polite"
                                class="text"
                                role="alert"
                              />
                              <i
                                class="icon clear"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                              <div
                                class="menu transition"
                              >
                                <div
                                  aria-checked="false"
                                  aria-selected="true"
                                  class="selected item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </div>
                            </div>,
                          }
                        }
                      >
                        <div
                          aria-disabled={false}
                          aria-expanded={false}
                          className="ui selection dropdown"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          role="listbox"
                          tabIndex={0}
                        >
                          <div
                            aria-atomic={true}
                            aria-live="polite"
                            className="text"
                            role="alert"
                          />
                          <Icon
                            className="clear"
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="close"
                            onClick={[Function]}
                            path={null}
                            size={null}
                          >
                            <i
                              className="icon clear"
                              onClick={[Function]}
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </Icon>
                          <DropdownMenu
                            open={false}
                          >
                            <div
                              className="menu transition"
                            >
                              <DropdownItem
                                active={false}
                                key="0"
                                onClick={[Function]}
                                selected={true}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Barcelona"
                                value="barcelona"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={true}
                                  className="selected item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="1"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Valencia"
                                value="valencia"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="2"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Madrid"
                                value="madrid"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="3"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Bilbao"
                                value="bilbao"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </DropdownItem>
                            </div>
                          </DropdownMenu>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Dropdown>
                </div>
              </Dropdown>
            </div>
            <div
              className="input-container dates-input-container"
            >
              <WithResponsive(DateRangePicker)
                endDatePlaceholderText="Check out"
                getIsDayBlocked={[Function]}
                localeCode="ko"
                name="dates"
                onChange={[Function]}
                onFocusChange={[Function]}
                startDatePlaceholderText="Check in"
                value={
                  Object {
                    "endDtate": "1970-01-01T00:00:00.000Z",
                    "startDate": "1970-01-01T00:00:00.000Z",
                  }
                }
                willOpenAbove={false}
              >
                <Responsive
                  as={[Function]}
                  endDatePlaceholderText="Check out"
                  getIsDayBlocked={[Function]}
                  getWidth={[Function]}
                  isUserOnMobile={false}
                  localeCode="ko"
                  name="dates"
                  onChange={[Function]}
                  onFocusChange={[Function]}
                  onUpdate={[Function]}
                  startDatePlaceholderText="Check in"
                  value={
                    Object {
                      "endDtate": "1970-01-01T00:00:00.000Z",
                      "startDate": "1970-01-01T00:00:00.000Z",
                    }
                  }
                  willOpenAbove={false}
                  windowInnerWidth={1024}
                >
                  <DateRangePicker
                    displayFormat="DD/MM/YYYY"
                    endDatePlaceholderText="Check out"
                    error={false}
                    getIsDayBlocked={[Function]}
                    isLoading={false}
                    isUserOnMobile={false}
                    isValid={false}
                    localeCode="ko"
                    name="dates"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    startDatePlaceholderText="Check in"
                    value={
                      Object {
                        "endDtate": "1970-01-01T00:00:00.000Z",
                        "startDate": "1970-01-01T00:00:00.000Z",
                      }
                    }
                    willOpenAbove={false}
                    windowInnerWidth={1024}
                  >
                    <InputController
                      adaptOnChangeEvent={[Function]}
                      error={false}
                      icon={null}
                      inputOnChangeFunctionName="onDatesChange"
                      isCompact={false}
                      isFluid={false}
                      isFocused={false}
                      isValid={false}
                      mapValueToProps={[Function]}
                      name="dates"
                      onChange={[Function]}
                      value={
                        Object {
                          "endDtate": "1970-01-01T00:00:00.000Z",
                          "startDate": "1970-01-01T00:00:00.000Z",
                        }
                      }
                    >
                      <Input
                        className="dirty"
                        fluid={false}
                        iconPosition={null}
                        name="dates"
                        type="text"
                        value={
                          Object {
                            "endDtate": "1970-01-01T00:00:00.000Z",
                            "startDate": "1970-01-01T00:00:00.000Z",
                          }
                        }
                      >
                        <div
                          className="ui input dirty"
                        >
                          <DateRangePicker
                            customArrowIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            customInputIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="calendar"
                                path={null}
                                size={null}
                              />
                            }
                            daySize={52}
                            disabled={false}
                            displayFormat="DD/MM/YYYY"
                            endDatePlaceholderText="Check out"
                            focusedInput={null}
                            hideKeyboardShortcutsPanel={true}
                            isDayBlocked={[Function]}
                            key=".0"
                            navNext={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            navPrev={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow left"
                                path={null}
                                size={null}
                              />
                            }
                            onDatesChange={[Function]}
                            onFocusChange={[Function]}
                            openDirection="down"
                            showClearDates={true}
                            startDate={"1970-01-01T00:00:00.000Z"}
                            startDatePlaceholderText="Check in"
                            withPortal={true}
                          >
                            <div />
                          </DateRangePicker>
                        </div>
                      </Input>
                    </InputController>
                    <div />
                  </DateRangePicker>
                </Responsive>
              </WithResponsive(DateRangePicker)>
            </div>
            <div
              className="input-container guests-input-container"
            >
              <CounterDropdown
                counterName="guests"
                counterValue={1}
                dropdownLabel="Guests"
                onChange={[Function]}
                willOpenAbove={false}
              >
                <Popup
                  className="counter-dropdown"
                  content={
                    <FlexContainer
                      alignContent={null}
                      alignItems={null}
                      className={null}
                      flexDirection="row"
                      flexWrap={null}
                      justifyContent="space-between"
                    >
                      <Counter
                        min={0}
                        name="guests"
                        onChange={[Function]}
                        renderValue={[Function]}
                        value={1}
                      />
                    </FlexContainer>
                  }
                  disabled={false}
                  eventsEnabled={true}
                  offset={0}
                  on="click"
                  onClose={[Function]}
                  onOpen={[Function]}
                  open={false}
                  pinned={false}
                  position="bottom left"
                  text="Guests"
                  trigger={
                    <div
                      className="dropdown-container dirty"
                      role="button"
                    >
                      <div
                        className="ui selection dropdown counter-dropdown-trigger"
                      >
                        Guests
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="caret down"
                          path={null}
                          size={null}
                        />
                      </div>
                    </div>
                  }
                >
                  <Portal
                    closeOnDocumentClick={true}
                    closeOnEscape={true}
                    closeOnTriggerClick={true}
                    eventPool="default"
                    onClose={[Function]}
                    onMount={[Function]}
                    onOpen={[Function]}
                    onUnmount={[Function]}
                    open={false}
                    openOnTriggerClick={true}
                    trigger={
                      <div
                        className="dropdown-container dirty"
                        role="button"
                      >
                        <div
                          className="ui selection dropdown counter-dropdown-trigger"
                        >
                          Guests
                          <Icon
                            className={null}
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="caret down"
                            path={null}
                            size={null}
                          />
                        </div>
                      </div>
                    }
                    triggerRef={
                      Object {
                        "current": <div
                          class="dropdown-container dirty"
                          role="button"
                        >
                          <div
                            class="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20,8.5l-8,7-8-7Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </div>
                        </div>,
                      }
                    }
                  >
                    <Ref
                      innerRef={[Function]}
                    >
                      <RefFindNode
                        innerRef={[Function]}
                      >
                        <div
                          className="dropdown-container dirty"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          role="button"
                        >
                          <div
                            className="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <Icon
                              className={null}
                              color={null}
                              hasBorder={false}
                              isButton={false}
                              isCircular={false}
                              isColorInverted={false}
                              isDisabled={false}
                              isLabelLeft={false}
                              labelText={null}
                              labelWeight={null}
                              name="caret down"
                              path={null}
                              size={null}
                            >
                              <i
                                className="icon"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M20,8.5l-8,7-8-7Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                            </Icon>
                          </div>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Portal>
                </Popup>
              </CounterDropdown>
            </div>
            <div
              className="button-container"
            >
              <Button
                hasShadow={false}
                icon="search"
                isCompact={false}
                isDisabled={false}
                isFluid={false}
                isFormSubmit={true}
                isLoading={false}
                isOutlined={false}
                isPositionedRight={false}
                isRounded={true}
                isSecondary={false}
                onClick={[Function]}
                size={null}
              >
                <Button
                  as="button"
                  basic={false}
                  circular={true}
                  className=""
                  compact={false}
                  disabled={false}
                  floated="left"
                  fluid={false}
                  loading={false}
                  onClick={[Function]}
                  secondary={false}
                  size={null}
                  type="submit"
                >
                  <Ref
                    innerRef={
                      Object {
                        "current": <button
                          class="ui circular left floated button"
                          type="submit"
                        >
                          <i
                            class="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                          Search
                        </button>,
                      }
                    }
                  >
                    <RefFindNode
                      innerRef={
                        Object {
                          "current": <button
                            class="ui circular left floated button"
                            type="submit"
                          >
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            Search
                          </button>,
                        }
                      }
                    >
                      <button
                        className="ui circular left floated button"
                        onClick={[Function]}
                        type="submit"
                      >
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="search"
                          path={null}
                          size={null}
                        >
                          <i
                            className="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                        </Icon>
                        Search
                      </button>
                    </RefFindNode>
                  </Ref>
                </Button>
              </Button>
            </div>
          </div>
        </SearchFields>
      </form>
    </Form>
  </div>
</SearchBar>
`;

exports[`<SearchBar /> if \`props.locationOptions\` is not passed should render the right structure 1`] = `
<SearchBar
  className={null}
  dateRangePickerLocaleCode="ko"
  datesCheckInLabel="Check in"
  datesCheckOutLabel="Check out"
  datesInputOnFocusChange={[Function]}
  datesInputValue={
    Object {
      "endDtate": "1970-01-01T00:00:00.000Z",
      "startDate": "1970-01-01T00:00:00.000Z",
    }
  }
  getIsDayBlocked={[Function]}
  guestsInputLabel="Guests"
  guestsInputValue={1}
  isDisplayedAsModal={false}
  isFixed={false}
  isStackable={false}
  locationInputLabel="Location"
  locationInputValue="some value"
  locationOptions={null}
  modalHeadingText="Check our availability"
  modalSummaryElement={null}
  onChangeInput={[Function]}
  onCloseModal={[Function]}
  onSubmit={[Function]}
  searchButton={
    <Button
      hasShadow={false}
      icon="search"
      isCompact={false}
      isDisabled={false}
      isFluid={false}
      isFormSubmit={true}
      isLoading={false}
      isOutlined={false}
      isPositionedRight={false}
      isRounded={true}
      isSecondary={false}
      onClick={[Function]}
      size={null}
    >
      Search
    </Button>
  }
  summaryElement={null}
  willLocationDropdownOpenAbove={false}
>
  <div
    className="search-bar"
  >
    <Form
      as="form"
      onSubmit={[Function]}
    >
      <form
        className="ui form"
        onSubmit={[Function]}
      >
        <SearchFields
          className={null}
          dateRangePickerLocaleCode="ko"
          datesCheckInLabel="Check in"
          datesCheckOutLabel="Check out"
          datesInputOnFocusChange={[Function]}
          datesInputValue={
            Object {
              "endDtate": "1970-01-01T00:00:00.000Z",
              "startDate": "1970-01-01T00:00:00.000Z",
            }
          }
          getIsDayBlocked={[Function]}
          guestsInputLabel="Guests"
          guestsInputValue={1}
          isDisplayedAsModal={false}
          isFixed={false}
          isStackable={false}
          locationInputLabel="Location"
          locationInputValue="some value"
          locationOptions={null}
          modalHeadingText="Check our availability"
          modalSummaryElement={null}
          onChangeInput={[Function]}
          onCloseModal={[Function]}
          onInputChange={[Function]}
          onSubmit={[Function]}
          searchButton={
            <Button
              hasShadow={false}
              icon="search"
              isCompact={false}
              isDisabled={false}
              isFluid={false}
              isFormSubmit={true}
              isLoading={false}
              isOutlined={false}
              isPositionedRight={false}
              isRounded={true}
              isSecondary={false}
              onClick={[Function]}
              size={null}
            >
              Search
            </Button>
          }
          summaryElement={null}
          willLocationDropdownOpenAbove={false}
        >
          <div
            className="inputs-container"
          >
            <div
              className="input-container dates-input-container"
            >
              <WithResponsive(DateRangePicker)
                endDatePlaceholderText="Check out"
                getIsDayBlocked={[Function]}
                localeCode="ko"
                name="dates"
                onChange={[Function]}
                onFocusChange={[Function]}
                startDatePlaceholderText="Check in"
                value={
                  Object {
                    "endDtate": "1970-01-01T00:00:00.000Z",
                    "startDate": "1970-01-01T00:00:00.000Z",
                  }
                }
                willOpenAbove={false}
              >
                <Responsive
                  as={[Function]}
                  endDatePlaceholderText="Check out"
                  getIsDayBlocked={[Function]}
                  getWidth={[Function]}
                  isUserOnMobile={false}
                  localeCode="ko"
                  name="dates"
                  onChange={[Function]}
                  onFocusChange={[Function]}
                  onUpdate={[Function]}
                  startDatePlaceholderText="Check in"
                  value={
                    Object {
                      "endDtate": "1970-01-01T00:00:00.000Z",
                      "startDate": "1970-01-01T00:00:00.000Z",
                    }
                  }
                  willOpenAbove={false}
                  windowInnerWidth={1024}
                >
                  <DateRangePicker
                    displayFormat="DD/MM/YYYY"
                    endDatePlaceholderText="Check out"
                    error={false}
                    getIsDayBlocked={[Function]}
                    isLoading={false}
                    isUserOnMobile={false}
                    isValid={false}
                    localeCode="ko"
                    name="dates"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    startDatePlaceholderText="Check in"
                    value={
                      Object {
                        "endDtate": "1970-01-01T00:00:00.000Z",
                        "startDate": "1970-01-01T00:00:00.000Z",
                      }
                    }
                    willOpenAbove={false}
                    windowInnerWidth={1024}
                  >
                    <InputController
                      adaptOnChangeEvent={[Function]}
                      error={false}
                      icon={null}
                      inputOnChangeFunctionName="onDatesChange"
                      isCompact={false}
                      isFluid={false}
                      isFocused={false}
                      isValid={false}
                      mapValueToProps={[Function]}
                      name="dates"
                      onChange={[Function]}
                      value={
                        Object {
                          "endDtate": "1970-01-01T00:00:00.000Z",
                          "startDate": "1970-01-01T00:00:00.000Z",
                        }
                      }
                    >
                      <Input
                        className="dirty"
                        fluid={false}
                        iconPosition={null}
                        name="dates"
                        type="text"
                        value={
                          Object {
                            "endDtate": "1970-01-01T00:00:00.000Z",
                            "startDate": "1970-01-01T00:00:00.000Z",
                          }
                        }
                      >
                        <div
                          className="ui input dirty"
                        >
                          <DateRangePicker
                            customArrowIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            customInputIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="calendar"
                                path={null}
                                size={null}
                              />
                            }
                            daySize={52}
                            disabled={false}
                            displayFormat="DD/MM/YYYY"
                            endDatePlaceholderText="Check out"
                            focusedInput={null}
                            hideKeyboardShortcutsPanel={true}
                            isDayBlocked={[Function]}
                            key=".0"
                            navNext={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            navPrev={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow left"
                                path={null}
                                size={null}
                              />
                            }
                            onDatesChange={[Function]}
                            onFocusChange={[Function]}
                            openDirection="down"
                            showClearDates={true}
                            startDate={"1970-01-01T00:00:00.000Z"}
                            startDatePlaceholderText="Check in"
                            withPortal={true}
                          >
                            <div />
                          </DateRangePicker>
                        </div>
                      </Input>
                    </InputController>
                    <div />
                  </DateRangePicker>
                </Responsive>
              </WithResponsive(DateRangePicker)>
            </div>
            <div
              className="input-container guests-input-container"
            >
              <CounterDropdown
                counterName="guests"
                counterValue={1}
                dropdownLabel="Guests"
                onChange={[Function]}
                willOpenAbove={false}
              >
                <Popup
                  className="counter-dropdown"
                  content={
                    <FlexContainer
                      alignContent={null}
                      alignItems={null}
                      className={null}
                      flexDirection="row"
                      flexWrap={null}
                      justifyContent="space-between"
                    >
                      <Counter
                        min={0}
                        name="guests"
                        onChange={[Function]}
                        renderValue={[Function]}
                        value={1}
                      />
                    </FlexContainer>
                  }
                  disabled={false}
                  eventsEnabled={true}
                  offset={0}
                  on="click"
                  onClose={[Function]}
                  onOpen={[Function]}
                  open={false}
                  pinned={false}
                  position="bottom left"
                  text="Guests"
                  trigger={
                    <div
                      className="dropdown-container dirty"
                      role="button"
                    >
                      <div
                        className="ui selection dropdown counter-dropdown-trigger"
                      >
                        Guests
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="caret down"
                          path={null}
                          size={null}
                        />
                      </div>
                    </div>
                  }
                >
                  <Portal
                    closeOnDocumentClick={true}
                    closeOnEscape={true}
                    closeOnTriggerClick={true}
                    eventPool="default"
                    onClose={[Function]}
                    onMount={[Function]}
                    onOpen={[Function]}
                    onUnmount={[Function]}
                    open={false}
                    openOnTriggerClick={true}
                    trigger={
                      <div
                        className="dropdown-container dirty"
                        role="button"
                      >
                        <div
                          className="ui selection dropdown counter-dropdown-trigger"
                        >
                          Guests
                          <Icon
                            className={null}
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="caret down"
                            path={null}
                            size={null}
                          />
                        </div>
                      </div>
                    }
                    triggerRef={
                      Object {
                        "current": <div
                          class="dropdown-container dirty"
                          role="button"
                        >
                          <div
                            class="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20,8.5l-8,7-8-7Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </div>
                        </div>,
                      }
                    }
                  >
                    <Ref
                      innerRef={[Function]}
                    >
                      <RefFindNode
                        innerRef={[Function]}
                      >
                        <div
                          className="dropdown-container dirty"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          role="button"
                        >
                          <div
                            className="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <Icon
                              className={null}
                              color={null}
                              hasBorder={false}
                              isButton={false}
                              isCircular={false}
                              isColorInverted={false}
                              isDisabled={false}
                              isLabelLeft={false}
                              labelText={null}
                              labelWeight={null}
                              name="caret down"
                              path={null}
                              size={null}
                            >
                              <i
                                className="icon"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M20,8.5l-8,7-8-7Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                            </Icon>
                          </div>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Portal>
                </Popup>
              </CounterDropdown>
            </div>
            <div
              className="button-container"
            >
              <Button
                hasShadow={false}
                icon="search"
                isCompact={false}
                isDisabled={false}
                isFluid={false}
                isFormSubmit={true}
                isLoading={false}
                isOutlined={false}
                isPositionedRight={false}
                isRounded={true}
                isSecondary={false}
                onClick={[Function]}
                size={null}
              >
                <Button
                  as="button"
                  basic={false}
                  circular={true}
                  className=""
                  compact={false}
                  disabled={false}
                  floated="left"
                  fluid={false}
                  loading={false}
                  onClick={[Function]}
                  secondary={false}
                  size={null}
                  type="submit"
                >
                  <Ref
                    innerRef={
                      Object {
                        "current": <button
                          class="ui circular left floated button"
                          type="submit"
                        >
                          <i
                            class="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                          Search
                        </button>,
                      }
                    }
                  >
                    <RefFindNode
                      innerRef={
                        Object {
                          "current": <button
                            class="ui circular left floated button"
                            type="submit"
                          >
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            Search
                          </button>,
                        }
                      }
                    >
                      <button
                        className="ui circular left floated button"
                        onClick={[Function]}
                        type="submit"
                      >
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="search"
                          path={null}
                          size={null}
                        >
                          <i
                            className="icon"
                          >
                            <svg
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M20.22,4.14a6.38,6.38,0,0,0-9.75,8.2l-1.8,1.74a1.77,1.77,0,0,0-2,.31l-4.14,4a1.77,1.77,0,0,0,0,2.49l.37.39a1.77,1.77,0,0,0,2.5,0l4.15-4a1.79,1.79,0,0,0,.38-2l1.8-1.73a6.39,6.39,0,0,0,8.54-9.46ZM8.69,16.48l-4.15,4a.6.6,0,0,1-.85,0l-.37-.38a.62.62,0,0,1,0-.86l4.15-4a.61.61,0,0,1,.84,0l.2.2.19.21A.61.61,0,0,1,8.69,16.48Zm2.13-3.67h0L11,13Zm.41.41L11,13l.2.18Zm8-.88a5.23,5.23,0,1,1,.13-7.4A5.24,5.24,0,0,1,19.25,12.34Z"
                                fill="currentColor"
                              />
                            </svg>
                          </i>
                        </Icon>
                        Search
                      </button>
                    </RefFindNode>
                  </Ref>
                </Button>
              </Button>
            </div>
          </div>
        </SearchFields>
      </form>
    </Form>
  </div>
</SearchBar>
`;

exports[`<SearchBar /> if \`props.searchButton\` is passed should render the right children 1`] = `
<SearchBar
  className={null}
  dateRangePickerLocaleCode="ko"
  datesCheckInLabel="Check in"
  datesCheckOutLabel="Check out"
  datesInputOnFocusChange={[Function]}
  datesInputValue={
    Object {
      "endDtate": "1970-01-01T00:00:00.000Z",
      "startDate": "1970-01-01T00:00:00.000Z",
    }
  }
  getIsDayBlocked={[Function]}
  guestsInputLabel="Guests"
  guestsInputValue={1}
  isDisplayedAsModal={false}
  isFixed={false}
  isStackable={false}
  locationInputLabel="Location"
  locationInputValue="some value"
  locationOptions={
    Array [
      Object {
        "text": "Barcelona",
        "value": "barcelona",
      },
      Object {
        "text": "Valencia",
        "value": "valencia",
      },
      Object {
        "text": "Madrid",
        "value": "madrid",
      },
      Object {
        "text": "Bilbao",
        "value": "bilbao",
      },
    ]
  }
  modalHeadingText="Check our availability"
  modalSummaryElement={null}
  onChangeInput={[Function]}
  onCloseModal={[Function]}
  onSubmit={[Function]}
  searchButton={<div />}
  summaryElement={null}
  willLocationDropdownOpenAbove={false}
>
  <div
    className="search-bar"
  >
    <Form
      as="form"
      onSubmit={[Function]}
    >
      <form
        className="ui form"
        onSubmit={[Function]}
      >
        <SearchFields
          className={null}
          dateRangePickerLocaleCode="ko"
          datesCheckInLabel="Check in"
          datesCheckOutLabel="Check out"
          datesInputOnFocusChange={[Function]}
          datesInputValue={
            Object {
              "endDtate": "1970-01-01T00:00:00.000Z",
              "startDate": "1970-01-01T00:00:00.000Z",
            }
          }
          getIsDayBlocked={[Function]}
          guestsInputLabel="Guests"
          guestsInputValue={1}
          isDisplayedAsModal={false}
          isFixed={false}
          isStackable={false}
          locationInputLabel="Location"
          locationInputValue="some value"
          locationOptions={
            Array [
              Object {
                "text": "Barcelona",
                "value": "barcelona",
              },
              Object {
                "text": "Valencia",
                "value": "valencia",
              },
              Object {
                "text": "Madrid",
                "value": "madrid",
              },
              Object {
                "text": "Bilbao",
                "value": "bilbao",
              },
            ]
          }
          modalHeadingText="Check our availability"
          modalSummaryElement={null}
          onChangeInput={[Function]}
          onCloseModal={[Function]}
          onInputChange={[Function]}
          onSubmit={[Function]}
          searchButton={<div />}
          summaryElement={null}
          willLocationDropdownOpenAbove={false}
        >
          <div
            className="inputs-container"
          >
            <div
              className="input-container location-input-container"
            >
              <Dropdown
                error={false}
                getOptionsWithSearch={null}
                icon="map pin"
                initialValue={null}
                isClearable={true}
                isCompact={false}
                isDisabled={false}
                isSearchable={false}
                isValid={false}
                label="Location"
                name="location"
                noResultsText="No results"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                options={
                  Array [
                    Object {
                      "text": "Barcelona",
                      "value": "barcelona",
                    },
                    Object {
                      "text": "Valencia",
                      "value": "valencia",
                    },
                    Object {
                      "text": "Madrid",
                      "value": "madrid",
                    },
                    Object {
                      "text": "Bilbao",
                      "value": "bilbao",
                    },
                  ]
                }
                value="some value"
                willOpenAbove={false}
              >
                <div
                  className="dropdown-container dirty"
                >
                  <Icon
                    className={null}
                    color={null}
                    hasBorder={false}
                    isButton={false}
                    isCircular={false}
                    isColorInverted={false}
                    isDisabled={false}
                    isLabelLeft={false}
                    labelText={null}
                    labelWeight={null}
                    name="map pin"
                    path={null}
                    size={null}
                  >
                    <i
                      className="icon"
                    >
                      <svg
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M12,2.72c-3.17,0-5.74,3-5.74,6.69S12,21.28,12,21.28s5.74-8.17,5.74-11.87S15.17,2.72,12,2.72Zm0,9.74a4,4,0,1,1,4-4A4,4,0,0,1,12,12.46Z"
                          fill="currentColor"
                        />
                      </svg>
                    </i>
                  </Icon>
                  <Dropdown
                    additionLabel="Add "
                    additionPosition="top"
                    clearable={true}
                    closeOnBlur={true}
                    closeOnEscape={true}
                    compact={false}
                    deburr={false}
                    disabled={false}
                    icon={
                      <Icon
                        className={null}
                        color={null}
                        hasBorder={false}
                        isButton={false}
                        isCircular={false}
                        isColorInverted={false}
                        isDisabled={false}
                        isLabelLeft={false}
                        labelText={null}
                        labelWeight={null}
                        name="close"
                        path={null}
                        size={null}
                      />
                    }
                    minCharacters={1}
                    noResultsMessage="No results"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onClick={[Function]}
                    open={false}
                    openOnFocus={true}
                    options={
                      Array [
                        Object {
                          "key": "0",
                          "label": undefined,
                          "text": "Barcelona",
                          "value": "barcelona",
                        },
                        Object {
                          "key": "1",
                          "label": undefined,
                          "text": "Valencia",
                          "value": "valencia",
                        },
                        Object {
                          "key": "2",
                          "label": undefined,
                          "text": "Madrid",
                          "value": "madrid",
                        },
                        Object {
                          "key": "3",
                          "label": undefined,
                          "text": "Bilbao",
                          "value": "bilbao",
                        },
                      ]
                    }
                    placeholder="Location"
                    renderLabel={[Function]}
                    search={false}
                    searchInput="text"
                    selectOnBlur={false}
                    selectOnNavigation={true}
                    selection={true}
                    upward={false}
                    value="some value"
                    wrapSelection={true}
                  >
                    <Ref
                      innerRef={
                        Object {
                          "current": <div
                            aria-disabled="false"
                            aria-expanded="false"
                            class="ui selection dropdown"
                            role="listbox"
                            tabindex="0"
                          >
                            <div
                              aria-atomic="true"
                              aria-live="polite"
                              class="text"
                              role="alert"
                            />
                            <i
                              class="icon clear"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                            <div
                              class="menu transition"
                            >
                              <div
                                aria-checked="false"
                                aria-selected="true"
                                class="selected item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Barcelona
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Valencia
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Madrid
                                </span>
                              </div>
                              <div
                                aria-checked="false"
                                aria-selected="false"
                                class="item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  Bilbao
                                </span>
                              </div>
                            </div>
                          </div>,
                        }
                      }
                    >
                      <RefFindNode
                        innerRef={
                          Object {
                            "current": <div
                              aria-disabled="false"
                              aria-expanded="false"
                              class="ui selection dropdown"
                              role="listbox"
                              tabindex="0"
                            >
                              <div
                                aria-atomic="true"
                                aria-live="polite"
                                class="text"
                                role="alert"
                              />
                              <i
                                class="icon clear"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                              <div
                                class="menu transition"
                              >
                                <div
                                  aria-checked="false"
                                  aria-selected="true"
                                  class="selected item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                                <div
                                  aria-checked="false"
                                  aria-selected="false"
                                  class="item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </div>
                            </div>,
                          }
                        }
                      >
                        <div
                          aria-disabled={false}
                          aria-expanded={false}
                          className="ui selection dropdown"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          role="listbox"
                          tabIndex={0}
                        >
                          <div
                            aria-atomic={true}
                            aria-live="polite"
                            className="text"
                            role="alert"
                          />
                          <Icon
                            className="clear"
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="close"
                            onClick={[Function]}
                            path={null}
                            size={null}
                          >
                            <i
                              className="icon clear"
                              onClick={[Function]}
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M17.44,16.73a.51.51,0,0,1,0,.71.52.52,0,0,1-.71,0L12,12.71,7.27,17.44a.52.52,0,0,1-.71,0,.51.51,0,0,1,0-.71L11.29,12,6.56,7.27a.5.5,0,1,1,.71-.71L12,11.29l4.73-4.73a.5.5,0,1,1,.71.71L12.71,12Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </Icon>
                          <DropdownMenu
                            open={false}
                          >
                            <div
                              className="menu transition"
                            >
                              <DropdownItem
                                active={false}
                                key="0"
                                onClick={[Function]}
                                selected={true}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Barcelona"
                                value="barcelona"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={true}
                                  className="selected item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Barcelona
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="1"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Valencia"
                                value="valencia"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Valencia
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="2"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Madrid"
                                value="madrid"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Madrid
                                  </span>
                                </div>
                              </DropdownItem>
                              <DropdownItem
                                active={false}
                                key="3"
                                onClick={[Function]}
                                selected={false}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="Bilbao"
                                value="bilbao"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={false}
                                  className="item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    Bilbao
                                  </span>
                                </div>
                              </DropdownItem>
                            </div>
                          </DropdownMenu>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Dropdown>
                </div>
              </Dropdown>
            </div>
            <div
              className="input-container dates-input-container"
            >
              <WithResponsive(DateRangePicker)
                endDatePlaceholderText="Check out"
                getIsDayBlocked={[Function]}
                localeCode="ko"
                name="dates"
                onChange={[Function]}
                onFocusChange={[Function]}
                startDatePlaceholderText="Check in"
                value={
                  Object {
                    "endDtate": "1970-01-01T00:00:00.000Z",
                    "startDate": "1970-01-01T00:00:00.000Z",
                  }
                }
                willOpenAbove={false}
              >
                <Responsive
                  as={[Function]}
                  endDatePlaceholderText="Check out"
                  getIsDayBlocked={[Function]}
                  getWidth={[Function]}
                  isUserOnMobile={false}
                  localeCode="ko"
                  name="dates"
                  onChange={[Function]}
                  onFocusChange={[Function]}
                  onUpdate={[Function]}
                  startDatePlaceholderText="Check in"
                  value={
                    Object {
                      "endDtate": "1970-01-01T00:00:00.000Z",
                      "startDate": "1970-01-01T00:00:00.000Z",
                    }
                  }
                  willOpenAbove={false}
                  windowInnerWidth={1024}
                >
                  <DateRangePicker
                    displayFormat="DD/MM/YYYY"
                    endDatePlaceholderText="Check out"
                    error={false}
                    getIsDayBlocked={[Function]}
                    isLoading={false}
                    isUserOnMobile={false}
                    isValid={false}
                    localeCode="ko"
                    name="dates"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    startDatePlaceholderText="Check in"
                    value={
                      Object {
                        "endDtate": "1970-01-01T00:00:00.000Z",
                        "startDate": "1970-01-01T00:00:00.000Z",
                      }
                    }
                    willOpenAbove={false}
                    windowInnerWidth={1024}
                  >
                    <InputController
                      adaptOnChangeEvent={[Function]}
                      error={false}
                      icon={null}
                      inputOnChangeFunctionName="onDatesChange"
                      isCompact={false}
                      isFluid={false}
                      isFocused={false}
                      isValid={false}
                      mapValueToProps={[Function]}
                      name="dates"
                      onChange={[Function]}
                      value={
                        Object {
                          "endDtate": "1970-01-01T00:00:00.000Z",
                          "startDate": "1970-01-01T00:00:00.000Z",
                        }
                      }
                    >
                      <Input
                        className="dirty"
                        fluid={false}
                        iconPosition={null}
                        name="dates"
                        type="text"
                        value={
                          Object {
                            "endDtate": "1970-01-01T00:00:00.000Z",
                            "startDate": "1970-01-01T00:00:00.000Z",
                          }
                        }
                      >
                        <div
                          className="ui input dirty"
                        >
                          <DateRangePicker
                            customArrowIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            customInputIcon={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="calendar"
                                path={null}
                                size={null}
                              />
                            }
                            daySize={52}
                            disabled={false}
                            displayFormat="DD/MM/YYYY"
                            endDatePlaceholderText="Check out"
                            focusedInput={null}
                            hideKeyboardShortcutsPanel={true}
                            isDayBlocked={[Function]}
                            key=".0"
                            navNext={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow right"
                                path={null}
                                size={null}
                              />
                            }
                            navPrev={
                              <Icon
                                className={null}
                                color={null}
                                hasBorder={false}
                                isButton={false}
                                isCircular={false}
                                isColorInverted={false}
                                isDisabled={false}
                                isLabelLeft={false}
                                labelText={null}
                                labelWeight={null}
                                name="arrow left"
                                path={null}
                                size={null}
                              />
                            }
                            onDatesChange={[Function]}
                            onFocusChange={[Function]}
                            openDirection="down"
                            showClearDates={true}
                            startDate={"1970-01-01T00:00:00.000Z"}
                            startDatePlaceholderText="Check in"
                            withPortal={true}
                          >
                            <div />
                          </DateRangePicker>
                        </div>
                      </Input>
                    </InputController>
                    <div />
                  </DateRangePicker>
                </Responsive>
              </WithResponsive(DateRangePicker)>
            </div>
            <div
              className="input-container guests-input-container"
            >
              <CounterDropdown
                counterName="guests"
                counterValue={1}
                dropdownLabel="Guests"
                onChange={[Function]}
                willOpenAbove={false}
              >
                <Popup
                  className="counter-dropdown"
                  content={
                    <FlexContainer
                      alignContent={null}
                      alignItems={null}
                      className={null}
                      flexDirection="row"
                      flexWrap={null}
                      justifyContent="space-between"
                    >
                      <Counter
                        min={0}
                        name="guests"
                        onChange={[Function]}
                        renderValue={[Function]}
                        value={1}
                      />
                    </FlexContainer>
                  }
                  disabled={false}
                  eventsEnabled={true}
                  offset={0}
                  on="click"
                  onClose={[Function]}
                  onOpen={[Function]}
                  open={false}
                  pinned={false}
                  position="bottom left"
                  text="Guests"
                  trigger={
                    <div
                      className="dropdown-container dirty"
                      role="button"
                    >
                      <div
                        className="ui selection dropdown counter-dropdown-trigger"
                      >
                        Guests
                        <Icon
                          className={null}
                          color={null}
                          hasBorder={false}
                          isButton={false}
                          isCircular={false}
                          isColorInverted={false}
                          isDisabled={false}
                          isLabelLeft={false}
                          labelText={null}
                          labelWeight={null}
                          name="caret down"
                          path={null}
                          size={null}
                        />
                      </div>
                    </div>
                  }
                >
                  <Portal
                    closeOnDocumentClick={true}
                    closeOnEscape={true}
                    closeOnTriggerClick={true}
                    eventPool="default"
                    onClose={[Function]}
                    onMount={[Function]}
                    onOpen={[Function]}
                    onUnmount={[Function]}
                    open={false}
                    openOnTriggerClick={true}
                    trigger={
                      <div
                        className="dropdown-container dirty"
                        role="button"
                      >
                        <div
                          className="ui selection dropdown counter-dropdown-trigger"
                        >
                          Guests
                          <Icon
                            className={null}
                            color={null}
                            hasBorder={false}
                            isButton={false}
                            isCircular={false}
                            isColorInverted={false}
                            isDisabled={false}
                            isLabelLeft={false}
                            labelText={null}
                            labelWeight={null}
                            name="caret down"
                            path={null}
                            size={null}
                          />
                        </div>
                      </div>
                    }
                    triggerRef={
                      Object {
                        "current": <div
                          class="dropdown-container dirty"
                          role="button"
                        >
                          <div
                            class="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <i
                              class="icon"
                            >
                              <svg
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M20,8.5l-8,7-8-7Z"
                                  fill="currentColor"
                                />
                              </svg>
                            </i>
                          </div>
                        </div>,
                      }
                    }
                  >
                    <Ref
                      innerRef={[Function]}
                    >
                      <RefFindNode
                        innerRef={[Function]}
                      >
                        <div
                          className="dropdown-container dirty"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          role="button"
                        >
                          <div
                            className="ui selection dropdown counter-dropdown-trigger"
                          >
                            Guests
                            <Icon
                              className={null}
                              color={null}
                              hasBorder={false}
                              isButton={false}
                              isCircular={false}
                              isColorInverted={false}
                              isDisabled={false}
                              isLabelLeft={false}
                              labelText={null}
                              labelWeight={null}
                              name="caret down"
                              path={null}
                              size={null}
                            >
                              <i
                                className="icon"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M20,8.5l-8,7-8-7Z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </i>
                            </Icon>
                          </div>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Portal>
                </Popup>
              </CounterDropdown>
            </div>
            <div
              className="button-container"
            >
              <div />
            </div>
          </div>
        </SearchFields>
      </form>
    </Form>
  </div>
</SearchBar>
`;
