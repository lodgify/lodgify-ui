// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomepageHero should render the right structure 1`] = `
<HomepageHero
  activeNavigationItemIndex={1}
  backgroundImageSizes="url"
  backgroundImageSrcSet="a load of sizes"
  backgroundImageUrl="bare sources"
  headerLogoSizes="a load of logo sizes"
  headerLogoSrc="src"
  headerLogoSrcSet="a load of logo src sets"
  headerLogoText="text"
  headerNavigationItems={
    Array [
      Object {
        "href": "/",
        "text": "Home",
      },
    ]
  }
  headerPrimaryCTA={
    Object {
      "onClick": [Function],
      "text": "Book now",
    }
  }
  headingText="heading text"
  placeholderBackgroundImageUrl={null}
  searchBarDatesInputOnFocusChange={[Function]}
  searchBarGetIsDayBlocked={[Function]}
  searchBarLocationOptions={
    Array [
      Object {
        "text": "1",
        "value": "1",
      },
    ]
  }
  searchBarModalHeadingText="Check our availability"
  searchBarOnChangeInput={[Function]}
  searchBarOnSubmit={[Function]}
  searchBarSearchButton={
    <button>
      search button
    </button>
  }
>
  <Hero
    activeNavigationItemIndex={1}
    backgroundImageSizes="url"
    backgroundImageSrcSet="a load of sizes"
    backgroundImageUrl="bare sources"
    bottomOffset="0px"
    headerLogoSizes="a load of logo sizes"
    headerLogoSrc="src"
    headerLogoSrcSet="a load of logo src sets"
    headerLogoText="text"
    headerNavigationItems={
      Array [
        Object {
          "href": "/",
          "text": "Home",
        },
      ]
    }
    headerPrimaryCTA={
      Object {
        "onClick": [Function],
        "text": "Book now",
      }
    }
    placeholderBackgroundImageUrl={null}
  >
    <FullBleed
      bottomOffset="0px"
      hasGradient={true}
      imageUrl="bare sources"
      placeholderImageUrl={null}
      sizes="url"
      srcSet="a load of sizes"
    >
      <Segment
        className="full-bleed has-gradient has-children"
        style={
          Object {
            "--full-bleed-bottom-offset": "0px",
          }
        }
        vertical={true}
      >
        <div
          className="ui vertical segment full-bleed has-gradient has-children"
          style={
            Object {
              "--full-bleed-bottom-offset": "0px",
            }
          }
        >
          <withLazyLoad(ResponsiveImage)
            imageUrl="bare sources"
            isFluid={true}
            isLazyLoaded={true}
            placeholderImageUrl={null}
            sizes="url"
            srcSet="a load of sizes"
          >
            <LazyLoader
              componentProps={
                Object {
                  "imageHeight": undefined,
                  "imageWidth": undefined,
                  "isFluid": true,
                  "isLazyLoaded": true,
                  "placeholderImageUrl": null,
                  "sizes": "url",
                }
              }
              lazyProps={
                Object {
                  "imageUrl": "bare sources",
                  "srcSet": "a load of sizes",
                }
              }
            >
              <div />
              <ResponsiveImage
                hasRoundedCorners={false}
                imageHeight={null}
                imageTitle="Image Title"
                imageUrl=""
                imageWidth={null}
                isAvatar={false}
                isCircular={false}
                isFluid={true}
                isLazyLoaded={true}
                label={null}
                placeholderImageUrl={null}
                sizes="url"
                srcSet={null}
              >
                <figure
                  className="responsive-image is-fluid"
                />
              </ResponsiveImage>
              <div />
            </LazyLoader>
          </withLazyLoad(ResponsiveImage)>
          <Header
            activeNavigationItemIndex={1}
            isBackgroundFilled={false}
            logoHref="/"
            logoSizes="a load of logo sizes"
            logoSrc="src"
            logoSrcSet="a load of logo src sets"
            logoSubText={null}
            logoText="text"
            navigationItems={
              Array [
                Object {
                  "href": "/",
                  "text": "Home",
                },
              ]
            }
            primaryCTA={
              Object {
                "onClick": [Function],
                "text": "Book now",
              }
            }
          >
            <header
              className="is-opaque"
            >
              <HorizontalGutters
                as={[Function]}
                borderless={true}
                text={true}
              >
                <Container
                  as={[Function]}
                  borderless={true}
                  text={true}
                >
                  <Menu
                    borderless={true}
                    className="ui text container"
                  >
                    <div
                      className="ui borderless ui text container menu"
                    >
                      <MenuItem
                        className=""
                        href="/"
                        link={true}
                      >
                        <a
                          className="link item"
                          href="/"
                          onClick={[Function]}
                        >
                          <FlexContainer
                            alignContent={null}
                            alignItems={null}
                            flexDirection="column"
                            flexWrap={null}
                            justifyContent="center"
                          >
                            <div
                              className="flex-container"
                              style={
                                Object {
                                  "alignContent": null,
                                  "alignItems": null,
                                  "display": "flex",
                                  "flexDirection": "column",
                                  "flexGrow": "1",
                                  "flexWrap": null,
                                  "height": "100%",
                                  "justifyContent": "center",
                                }
                              }
                            >
                              <Image
                                alt="text"
                                as="img"
                                sizes="a load of logo sizes"
                                src="src"
                                srcSet="a load of logo src sets"
                                ui={true}
                              >
                                <img
                                  alt="text"
                                  className="ui image"
                                  sizes="a load of logo sizes"
                                  src="src"
                                  srcSet="a load of logo src sets"
                                />
                              </Image>
                            </div>
                          </FlexContainer>
                        </a>
                      </MenuItem>
                      <MenuMenu
                        position="right"
                      >
                        <div
                          className="right menu"
                        >
                          <MenuItem
                            active={false}
                            href="/"
                            key="Home0"
                            link={true}
                          >
                            <a
                              className="link item"
                              href="/"
                              onClick={[Function]}
                            >
                              Home
                            </a>
                          </MenuItem>
                          <MenuItem
                            className="no-underline"
                            link={true}
                          >
                            <div
                              className="link item no-underline"
                              onClick={[Function]}
                            >
                              <Button
                                hasShadow={false}
                                icon={null}
                                isCompact={false}
                                isDisabled={false}
                                isFluid={false}
                                isFormSubmit={false}
                                isLoading={false}
                                isOutlined={false}
                                isPositionedRight={false}
                                isRounded={true}
                                isSecondary={false}
                                onClick={[Function]}
                                size={null}
                              >
                                <Button
                                  as="button"
                                  basic={false}
                                  circular={true}
                                  className=""
                                  compact={false}
                                  disabled={false}
                                  floated="left"
                                  fluid={false}
                                  loading={false}
                                  onClick={[Function]}
                                  secondary={false}
                                  size={null}
                                  type="button"
                                >
                                  <Ref
                                    innerRef={
                                      Object {
                                        "current": <button
                                          class="ui circular left floated button"
                                          type="button"
                                        >
                                          Book now
                                        </button>,
                                      }
                                    }
                                  >
                                    <RefFindNode
                                      innerRef={
                                        Object {
                                          "current": <button
                                            class="ui circular left floated button"
                                            type="button"
                                          >
                                            Book now
                                          </button>,
                                        }
                                      }
                                    >
                                      <button
                                        className="ui circular left floated button"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        Book now
                                      </button>
                                    </RefFindNode>
                                  </Ref>
                                </Button>
                              </Button>
                            </div>
                          </MenuItem>
                        </div>
                      </MenuMenu>
                    </div>
                  </Menu>
                </Container>
              </HorizontalGutters>
            </header>
          </Header>
          <FlexContainer
            alignContent={null}
            alignItems="center"
            flexDirection="column"
            flexWrap={null}
            justifyContent="space-evenly"
          >
            <div
              className="flex-container"
              style={
                Object {
                  "alignContent": null,
                  "alignItems": "center",
                  "display": "flex",
                  "flexDirection": "column",
                  "flexGrow": "1",
                  "flexWrap": null,
                  "height": "100%",
                  "justifyContent": "space-evenly",
                }
              }
            >
              <HorizontalGutters>
                <Container>
                  <div
                    className="ui container"
                  >
                    <ShowOn
                      computer={true}
                      mobile={false}
                      parent={[Function]}
                      parentProps={
                        Object {
                          "isColorInverted": true,
                          "size": "huge",
                          "textAlign": "center",
                        }
                      }
                      tablet={true}
                      widescreen={true}
                    >
                      <Heading
                        className="show-on-tablet show-on-computer show-on-widescreen"
                        hasMargin={true}
                        isColorInverted={true}
                        size="huge"
                        textAlign="center"
                      >
                        <Header
                          as="h1"
                          className="show-on-tablet show-on-computer show-on-widescreen"
                          inverted={true}
                          textAlign="center"
                        >
                          <h1
                            className="ui inverted center aligned header show-on-tablet show-on-computer show-on-widescreen"
                          >
                            heading text
                          </h1>
                        </Header>
                      </Heading>
                    </ShowOn>
                    <ShowOn
                      computer={false}
                      mobile={true}
                      parent={[Function]}
                      parentProps={
                        Object {
                          "isColorInverted": true,
                          "size": "large",
                          "textAlign": "center",
                        }
                      }
                      tablet={false}
                      widescreen={false}
                    >
                      <Heading
                        className="show-on-mobile"
                        hasMargin={true}
                        isColorInverted={true}
                        size="large"
                        textAlign="center"
                      >
                        <Header
                          as="h2"
                          className="show-on-mobile"
                          inverted={true}
                          textAlign="center"
                        >
                          <h2
                            className="ui inverted center aligned header show-on-mobile"
                          >
                            heading text
                          </h2>
                        </Header>
                      </Heading>
                    </ShowOn>
                  </div>
                </Container>
              </HorizontalGutters>
              <HorizontalGutters>
                <Container>
                  <div
                    className="ui container"
                  >
                    <Grid
                      areColumnsCentered={true}
                      isStackable={false}
                    >
                      <Grid
                        centered={true}
                        stackable={false}
                      >
                        <div
                          className="ui centered grid"
                        >
                          <GridRow
                            horizontalAlignContent="center"
                          >
                            <GridRow
                              textAlign="center"
                            >
                              <div
                                className="center aligned row"
                              >
                                <ShowOn
                                  computer={true}
                                  mobile={false}
                                  parent={[Function]}
                                  parentProps={
                                    Object {
                                      "dateRangePickerLocaleCode": undefined,
                                      "datesCheckInLabel": undefined,
                                      "datesCheckOutLabel": undefined,
                                      "datesInputFocusedInput": undefined,
                                      "datesInputOnFocusChange": [Function],
                                      "datesInputValue": undefined,
                                      "getIsDayBlocked": [Function],
                                      "guestsInputLabel": undefined,
                                      "guestsInputValue": undefined,
                                      "locationInputLabel": undefined,
                                      "locationInputValue": undefined,
                                      "locationOptions": Array [
                                        Object {
                                          "text": "1",
                                          "value": "1",
                                        },
                                      ],
                                      "onChangeInput": [Function],
                                      "onSubmit": [Function],
                                      "searchButton": <button>
                                        search button
                                      </button>,
                                      "willLocationDropdownOpenAbove": true,
                                    }
                                  }
                                  tablet={true}
                                  widescreen={true}
                                >
                                  <SearchBar
                                    className="show-on-tablet show-on-computer show-on-widescreen"
                                    datesCheckInLabel="Check in"
                                    datesCheckOutLabel="Check out"
                                    datesInputOnFocusChange={[Function]}
                                    getIsDayBlocked={[Function]}
                                    guestsInputLabel="Guests"
                                    isDisplayedAsModal={false}
                                    isFixed={false}
                                    isStackable={false}
                                    locationInputLabel="Location"
                                    locationOptions={
                                      Array [
                                        Object {
                                          "text": "1",
                                          "value": "1",
                                        },
                                      ]
                                    }
                                    modalHeadingText="Check our availability"
                                    modalSummaryElement={null}
                                    onChangeInput={[Function]}
                                    onCloseModal={[Function]}
                                    onSubmit={[Function]}
                                    searchButton={
                                      <button>
                                        search button
                                      </button>
                                    }
                                    summaryElement={null}
                                    willLocationDropdownOpenAbove={true}
                                  >
                                    <div
                                      className="show-on-tablet show-on-computer show-on-widescreen search-bar"
                                    >
                                      <Form
                                        as="form"
                                        onSubmit={[Function]}
                                      >
                                        <form
                                          className="ui form"
                                          onSubmit={[Function]}
                                        >
                                          <div
                                            className="inputs-container"
                                          >
                                            <div
                                              className="input-container location-input-container"
                                            >
                                              <Dropdown
                                                error={false}
                                                getOptionsWithSearch={null}
                                                icon="map pin"
                                                initialValue={null}
                                                isClearable={true}
                                                isCompact={false}
                                                isDisabled={false}
                                                isSearchable={false}
                                                isValid={false}
                                                label="Location"
                                                name="location"
                                                noResultsText="No results"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                options={
                                                  Array [
                                                    Object {
                                                      "text": "1",
                                                      "value": "1",
                                                    },
                                                  ]
                                                }
                                                willOpenAbove={true}
                                              >
                                                <div
                                                  className="dropdown-container"
                                                >
                                                  <Icon
                                                    className={null}
                                                    color={null}
                                                    hasBorder={false}
                                                    isButton={false}
                                                    isCircular={false}
                                                    isColorInverted={false}
                                                    isDisabled={false}
                                                    isLabelLeft={false}
                                                    labelText={null}
                                                    labelWeight={null}
                                                    name="map pin"
                                                    path={null}
                                                    size={null}
                                                  >
                                                    <i
                                                      className="icon"
                                                    >
                                                      <svg
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <path
                                                          d="M12,2.72c-3.17,0-5.74,3-5.74,6.69S12,21.28,12,21.28s5.74-8.17,5.74-11.87S15.17,2.72,12,2.72Zm0,9.74a4,4,0,1,1,4-4A4,4,0,0,1,12,12.46Z"
                                                          fill="currentColor"
                                                        />
                                                      </svg>
                                                    </i>
                                                  </Icon>
                                                  <Dropdown
                                                    additionLabel="Add "
                                                    additionPosition="top"
                                                    clearable={true}
                                                    closeOnBlur={true}
                                                    closeOnEscape={true}
                                                    compact={false}
                                                    deburr={false}
                                                    disabled={false}
                                                    icon={
                                                      <Icon
                                                        className={null}
                                                        color={null}
                                                        hasBorder={false}
                                                        isButton={false}
                                                        isCircular={false}
                                                        isColorInverted={false}
                                                        isDisabled={false}
                                                        isLabelLeft={false}
                                                        labelText={null}
                                                        labelWeight={null}
                                                        name="caret down"
                                                        path={null}
                                                        size={null}
                                                      />
                                                    }
                                                    minCharacters={1}
                                                    noResultsMessage="No results"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    open={false}
                                                    openOnFocus={true}
                                                    options={
                                                      Array [
                                                        Object {
                                                          "key": "0",
                                                          "label": undefined,
                                                          "text": "1",
                                                          "value": "1",
                                                        },
                                                      ]
                                                    }
                                                    placeholder="Location"
                                                    renderLabel={[Function]}
                                                    search={false}
                                                    searchInput="text"
                                                    selectOnBlur={false}
                                                    selectOnNavigation={true}
                                                    selection={true}
                                                    upward={true}
                                                    wrapSelection={true}
                                                  >
                                                    <Ref
                                                      innerRef={
                                                        Object {
                                                          "current": <div
                                                            aria-disabled="false"
                                                            aria-expanded="false"
                                                            class="ui selection upward dropdown"
                                                            role="listbox"
                                                            tabindex="0"
                                                          >
                                                            <div
                                                              aria-atomic="true"
                                                              aria-live="polite"
                                                              class="default text"
                                                              role="alert"
                                                            >
                                                              Location
                                                            </div>
                                                            <i
                                                              class="icon"
                                                            >
                                                              <svg
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <path
                                                                  d="M20,8.5l-8,7-8-7Z"
                                                                  fill="currentColor"
                                                                />
                                                              </svg>
                                                            </i>
                                                            <div
                                                              class="menu transition"
                                                            >
                                                              <div
                                                                aria-checked="false"
                                                                aria-selected="true"
                                                                class="selected item"
                                                                role="option"
                                                                style="pointer-events: all;"
                                                              >
                                                                <span
                                                                  class="text"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </div>,
                                                        }
                                                      }
                                                    >
                                                      <RefFindNode
                                                        innerRef={
                                                          Object {
                                                            "current": <div
                                                              aria-disabled="false"
                                                              aria-expanded="false"
                                                              class="ui selection upward dropdown"
                                                              role="listbox"
                                                              tabindex="0"
                                                            >
                                                              <div
                                                                aria-atomic="true"
                                                                aria-live="polite"
                                                                class="default text"
                                                                role="alert"
                                                              >
                                                                Location
                                                              </div>
                                                              <i
                                                                class="icon"
                                                              >
                                                                <svg
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M20,8.5l-8,7-8-7Z"
                                                                    fill="currentColor"
                                                                  />
                                                                </svg>
                                                              </i>
                                                              <div
                                                                class="menu transition"
                                                              >
                                                                <div
                                                                  aria-checked="false"
                                                                  aria-selected="true"
                                                                  class="selected item"
                                                                  role="option"
                                                                  style="pointer-events: all;"
                                                                >
                                                                  <span
                                                                    class="text"
                                                                  >
                                                                    1
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>,
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          aria-disabled={false}
                                                          aria-expanded={false}
                                                          className="ui selection upward dropdown"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          onMouseDown={[Function]}
                                                          role="listbox"
                                                          tabIndex={0}
                                                        >
                                                          <div
                                                            aria-atomic={true}
                                                            aria-live="polite"
                                                            className="default text"
                                                            role="alert"
                                                          >
                                                            Location
                                                          </div>
                                                          <Icon
                                                            className=""
                                                            color={null}
                                                            hasBorder={false}
                                                            isButton={false}
                                                            isCircular={false}
                                                            isColorInverted={false}
                                                            isDisabled={false}
                                                            isLabelLeft={false}
                                                            labelText={null}
                                                            labelWeight={null}
                                                            name="caret down"
                                                            onClick={[Function]}
                                                            path={null}
                                                            size={null}
                                                          >
                                                            <i
                                                              className="icon"
                                                              onClick={[Function]}
                                                            >
                                                              <svg
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <path
                                                                  d="M20,8.5l-8,7-8-7Z"
                                                                  fill="currentColor"
                                                                />
                                                              </svg>
                                                            </i>
                                                          </Icon>
                                                          <DropdownMenu
                                                            open={false}
                                                          >
                                                            <div
                                                              className="menu transition"
                                                            >
                                                              <DropdownItem
                                                                active={false}
                                                                key="0"
                                                                onClick={[Function]}
                                                                selected={true}
                                                                style={
                                                                  Object {
                                                                    "pointerEvents": "all",
                                                                  }
                                                                }
                                                                text="1"
                                                                value="1"
                                                              >
                                                                <div
                                                                  aria-checked={false}
                                                                  aria-selected={true}
                                                                  className="selected item"
                                                                  onClick={[Function]}
                                                                  role="option"
                                                                  style={
                                                                    Object {
                                                                      "pointerEvents": "all",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="text"
                                                                  >
                                                                    1
                                                                  </span>
                                                                </div>
                                                              </DropdownItem>
                                                            </div>
                                                          </DropdownMenu>
                                                        </div>
                                                      </RefFindNode>
                                                    </Ref>
                                                  </Dropdown>
                                                </div>
                                              </Dropdown>
                                            </div>
                                            <div
                                              className="input-container dates-input-container"
                                            >
                                              <WithResponsive(DateRangePicker)
                                                endDatePlaceholderText="Check out"
                                                getIsDayBlocked={[Function]}
                                                name="dates"
                                                onChange={[Function]}
                                                onFocusChange={[Function]}
                                                startDatePlaceholderText="Check in"
                                                willOpenAbove={true}
                                              >
                                                <Responsive
                                                  as={[Function]}
                                                  endDatePlaceholderText="Check out"
                                                  getIsDayBlocked={[Function]}
                                                  getWidth={[Function]}
                                                  isUserOnMobile={false}
                                                  name="dates"
                                                  onChange={[Function]}
                                                  onFocusChange={[Function]}
                                                  onUpdate={[Function]}
                                                  startDatePlaceholderText="Check in"
                                                  willOpenAbove={true}
                                                  windowInnerWidth={1024}
                                                >
                                                  <DateRangePicker
                                                    displayFormat="DD/MM/YYYY"
                                                    endDatePlaceholderText="Check out"
                                                    error={false}
                                                    getIsDayBlocked={[Function]}
                                                    isLoading={false}
                                                    isUserOnMobile={false}
                                                    isValid={false}
                                                    localeCode="en"
                                                    name="dates"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocusChange={[Function]}
                                                    startDatePlaceholderText="Check in"
                                                    willOpenAbove={true}
                                                    windowInnerWidth={1024}
                                                  >
                                                    <InputController
                                                      adaptOnChangeEvent={[Function]}
                                                      error={false}
                                                      icon={null}
                                                      initialValue=""
                                                      inputOnChangeFunctionName="onDatesChange"
                                                      isCompact={false}
                                                      isFluid={false}
                                                      isFocused={false}
                                                      isValid={false}
                                                      label={null}
                                                      mapValueToProps={[Function]}
                                                      name="dates"
                                                      onChange={[Function]}
                                                    >
                                                      <Input
                                                        className=""
                                                        fluid={false}
                                                        iconPosition={null}
                                                        type="text"
                                                      >
                                                        <div
                                                          className="ui input"
                                                        >
                                                          <DateRangePicker
                                                            customArrowIcon={
                                                              <Icon
                                                                className={null}
                                                                color={null}
                                                                hasBorder={false}
                                                                isButton={false}
                                                                isCircular={false}
                                                                isColorInverted={false}
                                                                isDisabled={false}
                                                                isLabelLeft={false}
                                                                labelText={null}
                                                                labelWeight={null}
                                                                name="arrow right"
                                                                path={null}
                                                                size={null}
                                                              />
                                                            }
                                                            customInputIcon={
                                                              <Icon
                                                                className={null}
                                                                color={null}
                                                                hasBorder={false}
                                                                isButton={false}
                                                                isCircular={false}
                                                                isColorInverted={false}
                                                                isDisabled={false}
                                                                isLabelLeft={false}
                                                                labelText={null}
                                                                labelWeight={null}
                                                                name="calendar"
                                                                path={null}
                                                                size={null}
                                                              />
                                                            }
                                                            daySize={52}
                                                            disabled={false}
                                                            displayFormat="DD/MM/YYYY"
                                                            endDate={null}
                                                            endDatePlaceholderText="Check out"
                                                            focusedInput={null}
                                                            hideKeyboardShortcutsPanel={true}
                                                            isDayBlocked={[Function]}
                                                            key=".0"
                                                            navNext={
                                                              <Icon
                                                                className={null}
                                                                color={null}
                                                                hasBorder={false}
                                                                isButton={false}
                                                                isCircular={false}
                                                                isColorInverted={false}
                                                                isDisabled={false}
                                                                isLabelLeft={false}
                                                                labelText={null}
                                                                labelWeight={null}
                                                                name="arrow right"
                                                                path={null}
                                                                size={null}
                                                              />
                                                            }
                                                            navPrev={
                                                              <Icon
                                                                className={null}
                                                                color={null}
                                                                hasBorder={false}
                                                                isButton={false}
                                                                isCircular={false}
                                                                isColorInverted={false}
                                                                isDisabled={false}
                                                                isLabelLeft={false}
                                                                labelText={null}
                                                                labelWeight={null}
                                                                name="arrow left"
                                                                path={null}
                                                                size={null}
                                                              />
                                                            }
                                                            onDatesChange={[Function]}
                                                            onFocusChange={[Function]}
                                                            openDirection="up"
                                                            placeholder={null}
                                                            showClearDates={true}
                                                            startDate={null}
                                                            startDatePlaceholderText="Check in"
                                                            withPortal={false}
                                                          >
                                                            <div />
                                                          </DateRangePicker>
                                                        </div>
                                                      </Input>
                                                    </InputController>
                                                    <div />
                                                  </DateRangePicker>
                                                </Responsive>
                                              </WithResponsive(DateRangePicker)>
                                            </div>
                                            <div
                                              className="input-container guests-input-container"
                                            >
                                              <NumberInput
                                                autoComplete={null}
                                                error={false}
                                                icon={
                                                  <Icon
                                                    className={null}
                                                    color={null}
                                                    hasBorder={false}
                                                    isButton={false}
                                                    isCircular={false}
                                                    isColorInverted={false}
                                                    isDisabled={false}
                                                    isLabelLeft={false}
                                                    labelText={null}
                                                    labelWeight={null}
                                                    name="users"
                                                    path={null}
                                                    size={null}
                                                  />
                                                }
                                                isValid={false}
                                                label="Guests"
                                                min={0}
                                                name="guests"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                              >
                                                <InputController
                                                  adaptOnChangeEvent={[Function]}
                                                  error={false}
                                                  icon={
                                                    <Icon
                                                      className={null}
                                                      color={null}
                                                      hasBorder={false}
                                                      isButton={false}
                                                      isCircular={false}
                                                      isColorInverted={false}
                                                      isDisabled={false}
                                                      isLabelLeft={false}
                                                      labelText={null}
                                                      labelWeight={null}
                                                      name="users"
                                                      path={null}
                                                      size={null}
                                                    />
                                                  }
                                                  initialValue=""
                                                  inputOnChangeFunctionName="onChange"
                                                  isCompact={false}
                                                  isFluid={false}
                                                  isFocused={false}
                                                  isValid={false}
                                                  label="Guests"
                                                  mapValueToProps={[Function]}
                                                  name="guests"
                                                  onChange={[Function]}
                                                >
                                                  <Input
                                                    className=""
                                                    fluid={false}
                                                    iconPosition="left"
                                                    type="text"
                                                  >
                                                    <div
                                                      className="ui left icon input"
                                                    >
                                                      <input
                                                        autoComplete={null}
                                                        key=".0"
                                                        min={0}
                                                        name="guests"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        placeholder="Guests"
                                                        type="number"
                                                      />
                                                      <Icon
                                                        className={null}
                                                        color={null}
                                                        hasBorder={false}
                                                        isButton={false}
                                                        isCircular={false}
                                                        isColorInverted={false}
                                                        isDisabled={false}
                                                        isLabelLeft={false}
                                                        key=".3"
                                                        labelText={null}
                                                        labelWeight={null}
                                                        name="users"
                                                        path={null}
                                                        size={null}
                                                      >
                                                        <i
                                                          className="icon"
                                                        >
                                                          <svg
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <path
                                                              d="M18.63,8.88h-.08a4,4,0,1,0-4.18,0h-.08a2.2,2.2,0,0,0-2.2,2.2v9.35a2.1,2.1,0,0,0,2.1,2.1h4.54a2.11,2.11,0,0,0,2.11-2.1V11.08A2.21,2.21,0,0,0,18.63,8.88Zm-5.18-3.4a3,3,0,1,1,3,3A3,3,0,0,1,13.45,5.48Zm6.39,15a1.11,1.11,0,0,1-1.11,1.1H14.19a1.1,1.1,0,0,1-1.1-1.1V11.08a1.2,1.2,0,0,1,1.2-1.2h4.34a1.21,1.21,0,0,1,1.21,1.2ZM9,11.89a3.27,3.27,0,1,0-3.77,0,2.21,2.21,0,0,0-2.09,2.19v6.24a2.12,2.12,0,0,0,2.11,2.11H9a2.11,2.11,0,0,0,2.1-2.11V14.08A2.21,2.21,0,0,0,9,11.89ZM7.13,7A2.27,2.27,0,1,1,4.87,9.24,2.27,2.27,0,0,1,7.13,7Zm3,13.35A1.11,1.11,0,0,1,9,21.43H5.27a1.11,1.11,0,0,1-1.11-1.11V14.08a1.21,1.21,0,0,1,1.21-1.2H8.9a1.2,1.2,0,0,1,1.2,1.2Z"
                                                              fill="currentColor"
                                                            />
                                                          </svg>
                                                        </i>
                                                      </Icon>
                                                    </div>
                                                  </Input>
                                                </InputController>
                                              </NumberInput>
                                            </div>
                                            <div
                                              className="button-container"
                                            >
                                              <button>
                                                search button
                                              </button>
                                            </div>
                                          </div>
                                        </form>
                                      </Form>
                                    </div>
                                  </SearchBar>
                                </ShowOn>
                                <ShowOn
                                  computer={false}
                                  mobile={true}
                                  parent="div"
                                  parentProps={Object {}}
                                  tablet={false}
                                  widescreen={false}
                                >
                                  <div
                                    className="show-on-mobile"
                                  >
                                    <SearchBar
                                      className={null}
                                      datesCheckInLabel="Check in"
                                      datesCheckOutLabel="Check out"
                                      datesInputOnFocusChange={[Function]}
                                      getIsDayBlocked={[Function]}
                                      guestsInputLabel="Guests"
                                      isDisplayedAsModal={true}
                                      isFixed={false}
                                      isStackable={false}
                                      locationInputLabel="Location"
                                      locationOptions={
                                        Array [
                                          Object {
                                            "text": "1",
                                            "value": "1",
                                          },
                                        ]
                                      }
                                      modalHeadingText="Check our availability"
                                      modalSummaryElement={null}
                                      onChangeInput={[Function]}
                                      onCloseModal={[Function]}
                                      onSubmit={[Function]}
                                      searchButton={
                                        <button>
                                          search button
                                        </button>
                                      }
                                      summaryElement={null}
                                      willLocationDropdownOpenAbove={false}
                                    >
                                      <Modal
                                        hasCloseIcon={true}
                                        hasPadding={true}
                                        hasRoundedCorners={false}
                                        header={
                                          <Heading
                                            className={null}
                                            hasMargin={true}
                                            isColorInverted={false}
                                            size="small"
                                            textAlign={null}
                                          >
                                            Check our availability
                                          </Heading>
                                        }
                                        isFullscreen={true}
                                        onClose={[Function]}
                                        size="tiny"
                                        trigger={
                                          <button>
                                            search button
                                          </button>
                                        }
                                      >
                                        <Modal
                                          centered={true}
                                          className="has-padding"
                                          closeIcon={
                                            <Icon
                                              className={null}
                                              color={null}
                                              hasBorder={false}
                                              isButton={false}
                                              isCircular={false}
                                              isColorInverted={false}
                                              isDisabled={false}
                                              isLabelLeft={false}
                                              labelText={null}
                                              labelWeight={null}
                                              name="close"
                                              path={null}
                                              size={null}
                                            />
                                          }
                                          closeOnDimmerClick={true}
                                          closeOnDocumentClick={false}
                                          dimmer="inverted"
                                          eventPool="Modal"
                                          onClose={[Function]}
                                          size="fullscreen"
                                          trigger={
                                            <button>
                                              search button
                                            </button>
                                          }
                                        >
                                          <Portal
                                            closeOnDocumentClick={false}
                                            closeOnEscape={true}
                                            eventPool="Modal"
                                            mountNode={<body />}
                                            onClose={[Function]}
                                            onMount={[Function]}
                                            onOpen={[Function]}
                                            onUnmount={[Function]}
                                            openOnTriggerClick={true}
                                            trigger={
                                              <button>
                                                search button
                                              </button>
                                            }
                                          >
                                            <Ref
                                              innerRef={[Function]}
                                            >
                                              <RefFindNode
                                                innerRef={[Function]}
                                              >
                                                <button
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                >
                                                  search button
                                                </button>
                                              </RefFindNode>
                                            </Ref>
                                          </Portal>
                                        </Modal>
                                      </Modal>
                                    </SearchBar>
                                  </div>
                                </ShowOn>
                              </div>
                            </GridRow>
                          </GridRow>
                        </div>
                      </Grid>
                    </Grid>
                  </div>
                </Container>
              </HorizontalGutters>
            </div>
          </FlexContainer>
        </div>
      </Segment>
    </FullBleed>
  </Hero>
</HomepageHero>
`;
