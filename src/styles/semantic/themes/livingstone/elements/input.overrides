/*******************************
            Input
*******************************/

/*-------------------
      Element
--------------------*/

.ui.form .ui.input,
.ui.input {
  max-width: @inputMaxWidth;
  width: @inputWidth;

  &,
  & > input {
    font-family: @bodyFont;
  }

  /*-------------------
        Types
--------------------*/

  /* Icon Input */

  /*
    Partial duplication of declarations
    for `.ui.icon.input > i.icon`
    in `node_modules/semantic-ui-less/definitions/elements/input.less`
  */
  &.left.icon {

    & > i.icon {
      padding: @iconPadding;
    }

    & > i.flag:not(.icon) {
      cursor: default;
      height: 100%;
      margin: 0;
      overflow: hidden;
      position: absolute;
      width: @iconWidth;

      &:before {
        filter: @grayscaleFilter;
        left: 50%;
        margin-left: @flagIconXOffset;
        margin-top: @flagIconYOffset;
        position: absolute;
        text-align: center;
        top: 50%;
        transform: @flagIconScale;
      }
    }

    input:focus ~ i.flag:not(.icon),
    textarea:focus ~ i.flag:not(.icon),
    &.dirty > i.flag:not(.icon) {

      &:before {
        filter: none;
      }
    }

    label {
      left: @leftIconInputLabelLeftPosition;
    }

    input:focus + label,
    textarea:focus + label,
    &.dirty > label {
      transform: translate(-(@leftIconInputLabelFocusXTranslate), -(@labelFocusYTranslate));
    }
  }

  /* Circular Icon Input */

  /* Labeled Input */
  label {
    color: @labelColor;
    cursor: text;
    left: @inputHorizontalPadding;
    position: absolute;
    top: @inputVerticalPadding;
    transition: transform @defaultDuration, font-size @defaultDuration;
  }

  .ui.checkbox {

    label {
      left: 0;
      top: 0;
    }
  }

  input:focus + label,
  textarea:focus + label,
  &.dirty > label {
    color: @labelFocusColor;
    font-size: @labelFocusFontSize;
    transform: translate(-(@labelFocusXTranslate), -(@labelFocusYTranslate));
  }

  .ui.checkbox ~ label {
    width: 100%;
    color: @checkboxLabelColor;
    left: @checkboxLabelLeftPosition;
    top: 0;

    .privacy-consent-label {
      line-height: @checkboxLabelLineHeight;
      display: flex;

      .ui.button {
        padding: @checkboxPrivacyConsentLabelButtonPadding;
        line-height: inherit;
      }
    }

    &:before,
    &:after {
      cursor: pointer;
    }
  }

  .ui.checkbox.toggle ~ label {
    left: @checkboxToggleLabelLeftPosition;
    top: @checkboxToggleLabelTopPosition;
  }

  /* textarea */

  /* Date range picker */

  .DateRangePickerInput {
    min-width: @dateRangePickerMinWidth;

    input {
      text-overflow: ellipsis;

      &.DateInput_input__focused {
        display: flex;
      }
    }
  }

  /* Single date picker */

  textarea {
    background: @background;
    border: @border;
    font-family: @inputFont;
    outline: none;
    width: @inputWidth;
    padding: @padding;
  }

  /*-------------------
        States
--------------------*/

  /* Placeholder */

  /* Down */

  /* Focus */
  textarea:focus {
    border-color: @focusBorderColor;
    background: @focusBackground;
    color: @focusColor;
  }

  /* Error */
  &.error {

    input,
    textarea,
    .ui.checkbox label:before {
      border-color: @errorBorder;
    }

    .ui.pointing.below.label {
      font-weight: @errorMessageFontWeight;
      padding: @errorMessagePadding;
      position: absolute;
      right: @errorMessageRightPosition;
      top: @errorMessageTopPosition;

      &:before {
        left: auto;
        right: 6px;
      }
    }
  }

  /* Loader */

  /* Hover */
  &:hover:not(.error):not(.valid):not(.dirty):not(.focus) {

    input:not(:focus),
    textarea:not(:focus) {
      background: @focusedInputBackground;
      border-color: @hoveredInputBorderColor;
    }
  }

  /* Dirty */
  &.dirty {

    i.icon {
      opacity: @iconFocusOpacity;
    }
  }

  &.dirty:not(.error):not(.valid) {

    input,
    textarea {
      background: @focusedInputBackground;
      border-color: @focusedFormBorderColor;
    }
  }

  /* Valid */
  &.valid {

    input,
    textarea {
      background: @focusedInputBackground;
      border-color: @validBorderColor;
    }

    i.green.icon {
      left: inherit;
      opacity: @validIconOpacity;
      padding: @validIconPadding;
      position: absolute;
      right: @inputHorizontalPadding;
    }

    .ui.checkbox ~ i.green.icon {
      top: @validCheckBoxIconTopPosition;
    }
  }

  /*-------------------
      Variations
--------------------*/

  /* Inverted */

  /* Fluid */
  &.fluid {
    max-width: none;
  }
}

.ui.input.error {

  .ui.checkbox ~ .ui.pointing.below.label {
    left: 0;
    right: auto;

    &:before {
      left: @7px;
      right: auto;
    }
  }
}
